{"srcUpToDecl":"import Mathlib.MeasureTheory.Measure.ProbabilityMeasure\n\n/-!\n# The measure of a connected component of a space depends continuously on a finite measure\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction\n\nsection measure_of_component\n\n","proof":":= by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (FiniteMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)","declId":"PFR.Mathlib.MeasureTheory.Measure.ProbabilityMeasure.12_0.zQLMH5SMHOLppMX","decl":"lemma continuous_integral_finiteMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous (fun (μ : FiniteMeasure α) ↦ ∫ x, f x ∂μ) "}
{"srcUpToDecl":"import Mathlib.MeasureTheory.Measure.ProbabilityMeasure\n\n/-!\n# The measure of a connected component of a space depends continuously on a finite measure\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction\n\nsection measure_of_component\n\nlemma continuous_integral_finiteMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous (fun (μ : FiniteMeasure α) ↦ ∫ x, f x ∂μ) := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (FiniteMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\n","proof":":= by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)","declId":"PFR.Mathlib.MeasureTheory.Measure.ProbabilityMeasure.20_0.zQLMH5SMHOLppMX","decl":"lemma continuous_integral_probabilityMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous fun μ : ProbabilityMeasure α ↦ ∫ x, f x ∂μ "}
{"srcUpToDecl":"import Mathlib.MeasureTheory.Measure.ProbabilityMeasure\n\n/-!\n# The measure of a connected component of a space depends continuously on a finite measure\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction\n\nsection measure_of_component\n\nlemma continuous_integral_finiteMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous (fun (μ : FiniteMeasure α) ↦ ∫ x, f x ∂μ) := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (FiniteMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\nlemma continuous_integral_probabilityMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous fun μ : ProbabilityMeasure α ↦ ∫ x, f x ∂μ := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\n","proof":":= s.indicator (fun _ ↦ (1 : ℝ))\n      continuous_toFun := continuous_indicator (by simp [s_clopen]) $ continuous_const.continuousOn\n      map_bounded' := by\n        use 1\n        intro x y\n        by_cases hx : x ∈ s <;> by_cases hy : y ∈ s\n        · simp only [hx, hy, indicator_of_mem, dist_self, zero_le_one]\n        · simp only [hx, hy, indicator_of_mem, not_false_eq_true, indicator_of_not_mem,\n                      dist_zero_right, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, indicator_of_mem,\n                      dist_zero_left, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, dist_self, zero_le_one]","declId":"PFR.Mathlib.MeasureTheory.Measure.ProbabilityMeasure.28_0.zQLMH5SMHOLppMX","decl":"/-- The indicator function of a clopen set, as a bounded continuous function. -/\nnoncomputable def indicatorBCF {α : Type*} [TopologicalSpace α]\n    {s : Set α} (s_clopen : IsClopen s) :\n    BoundedContinuousFunction α ℝ where\n      toFun "}
{"srcUpToDecl":"import Mathlib.MeasureTheory.Measure.ProbabilityMeasure\n\n/-!\n# The measure of a connected component of a space depends continuously on a finite measure\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction\n\nsection measure_of_component\n\nlemma continuous_integral_finiteMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous (fun (μ : FiniteMeasure α) ↦ ∫ x, f x ∂μ) := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (FiniteMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\nlemma continuous_integral_probabilityMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous fun μ : ProbabilityMeasure α ↦ ∫ x, f x ∂μ := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\n/-- The indicator function of a clopen set, as a bounded continuous function. -/\nnoncomputable def indicatorBCF {α : Type*} [TopologicalSpace α]\n    {s : Set α} (s_clopen : IsClopen s) :\n    BoundedContinuousFunction α ℝ where\n      toFun := s.indicator (fun _ ↦ (1 : ℝ))\n      continuous_toFun := continuous_indicator (by simp [s_clopen]) $ continuous_const.continuousOn\n      map_bounded' := by\n        use 1\n        intro x y\n        by_cases hx : x ∈ s <;> by_cases hy : y ∈ s\n        · simp only [hx, hy, indicator_of_mem, dist_self, zero_le_one]\n        · simp only [hx, hy, indicator_of_mem, not_false_eq_true, indicator_of_not_mem,\n                      dist_zero_right, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, indicator_of_mem,\n                      dist_zero_left, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, dist_self, zero_le_one]\n\n","proof":":= rfl","declId":"PFR.Mathlib.MeasureTheory.Measure.ProbabilityMeasure.45_0.zQLMH5SMHOLppMX","decl":"@[simp] lemma indicatorBCF_apply {α : Type*} [TopologicalSpace α]\n    {s : Set α} (s_clopen : IsClopen s) (x : α) :\n    indicatorBCF s_clopen x = s.indicator (fun _ ↦ (1 : ℝ)) x "}
{"srcUpToDecl":"import Mathlib.MeasureTheory.Measure.ProbabilityMeasure\n\n/-!\n# The measure of a connected component of a space depends continuously on a finite measure\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction\n\nsection measure_of_component\n\nlemma continuous_integral_finiteMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous (fun (μ : FiniteMeasure α) ↦ ∫ x, f x ∂μ) := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (FiniteMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\nlemma continuous_integral_probabilityMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous fun μ : ProbabilityMeasure α ↦ ∫ x, f x ∂μ := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\n/-- The indicator function of a clopen set, as a bounded continuous function. -/\nnoncomputable def indicatorBCF {α : Type*} [TopologicalSpace α]\n    {s : Set α} (s_clopen : IsClopen s) :\n    BoundedContinuousFunction α ℝ where\n      toFun := s.indicator (fun _ ↦ (1 : ℝ))\n      continuous_toFun := continuous_indicator (by simp [s_clopen]) $ continuous_const.continuousOn\n      map_bounded' := by\n        use 1\n        intro x y\n        by_cases hx : x ∈ s <;> by_cases hy : y ∈ s\n        · simp only [hx, hy, indicator_of_mem, dist_self, zero_le_one]\n        · simp only [hx, hy, indicator_of_mem, not_false_eq_true, indicator_of_not_mem,\n                      dist_zero_right, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, indicator_of_mem,\n                      dist_zero_left, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, dist_self, zero_le_one]\n\n@[simp] lemma indicatorBCF_apply {α : Type*} [TopologicalSpace α]\n    {s : Set α} (s_clopen : IsClopen s) (x : α) :\n    indicatorBCF s_clopen x = s.indicator (fun _ ↦ (1 : ℝ)) x := rfl\n\n","proof":":= by\n  convert lintegral_indicator_one s_mble\n  rename_i x\n  by_cases hx : x ∈ s <;> simp [hx]","declId":"PFR.Mathlib.MeasureTheory.Measure.ProbabilityMeasure.49_0.zQLMH5SMHOLppMX","decl":"lemma lintegral_indicatorBCF {α : Type*} [TopologicalSpace α] [MeasurableSpace α] (μ : Measure α)\n    {s : Set α} (s_clopen : IsClopen s) (s_mble : MeasurableSet s) :\n    ∫⁻ x, ENNReal.ofReal (indicatorBCF s_clopen x) ∂μ = μ s "}
{"srcUpToDecl":"import Mathlib.MeasureTheory.Measure.ProbabilityMeasure\n\n/-!\n# The measure of a connected component of a space depends continuously on a finite measure\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction\n\nsection measure_of_component\n\nlemma continuous_integral_finiteMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous (fun (μ : FiniteMeasure α) ↦ ∫ x, f x ∂μ) := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (FiniteMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\nlemma continuous_integral_probabilityMeasure\n    {α : Type*} [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] (f : α →ᵇ ℝ) :\n    Continuous fun μ : ProbabilityMeasure α ↦ ∫ x, f x ∂μ := by\n  apply continuous_iff_continuousAt.mpr\n  intro μ\n  exact continuousAt_of_tendsto_nhds\n    (ProbabilityMeasure.tendsto_iff_forall_integral_tendsto.mp tendsto_id f)\n\n/-- The indicator function of a clopen set, as a bounded continuous function. -/\nnoncomputable def indicatorBCF {α : Type*} [TopologicalSpace α]\n    {s : Set α} (s_clopen : IsClopen s) :\n    BoundedContinuousFunction α ℝ where\n      toFun := s.indicator (fun _ ↦ (1 : ℝ))\n      continuous_toFun := continuous_indicator (by simp [s_clopen]) $ continuous_const.continuousOn\n      map_bounded' := by\n        use 1\n        intro x y\n        by_cases hx : x ∈ s <;> by_cases hy : y ∈ s\n        · simp only [hx, hy, indicator_of_mem, dist_self, zero_le_one]\n        · simp only [hx, hy, indicator_of_mem, not_false_eq_true, indicator_of_not_mem,\n                      dist_zero_right, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, indicator_of_mem,\n                      dist_zero_left, norm_one, le_refl]\n        · simp only [hx, hy, not_false_eq_true, indicator_of_not_mem, dist_self, zero_le_one]\n\n@[simp] lemma indicatorBCF_apply {α : Type*} [TopologicalSpace α]\n    {s : Set α} (s_clopen : IsClopen s) (x : α) :\n    indicatorBCF s_clopen x = s.indicator (fun _ ↦ (1 : ℝ)) x := rfl\n\nlemma lintegral_indicatorBCF {α : Type*} [TopologicalSpace α] [MeasurableSpace α] (μ : Measure α)\n    {s : Set α} (s_clopen : IsClopen s) (s_mble : MeasurableSet s) :\n    ∫⁻ x, ENNReal.ofReal (indicatorBCF s_clopen x) ∂μ = μ s := by\n  convert lintegral_indicator_one s_mble\n  rename_i x\n  by_cases hx : x ∈ s <;> simp [hx]\n\n","proof":":= integral_indicator_one s_mble","declId":"PFR.Mathlib.MeasureTheory.Measure.ProbabilityMeasure.56_0.zQLMH5SMHOLppMX","decl":"lemma integral_indicatorBCF {α : Type*} [TopologicalSpace α] [MeasurableSpace α] (μ : Measure α)\n    {s : Set α} (s_clopen : IsClopen s) (s_mble : MeasurableSet s) :\n    ∫ x, (indicatorBCF s_clopen x) ∂μ = (μ s).toReal "}
