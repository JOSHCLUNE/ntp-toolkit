{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n","proof":":= simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c","declId":"PFR.ForMathlib.Entropy.Group.19_0.0OFGje1dXrApGH7","decl":"@[to_additive (attr "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[","proof":":= simp)","declId":"PFR.ForMathlib.Entropy.Group.19_2.0OFGje1dXrApGH7","decl":"to_additive (attr "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n","proof":":= by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _","declId":"PFR.ForMathlib.Entropy.Group.24_0.0OFGje1dXrApGH7","decl":"/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n","proof":":= by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _","declId":"PFR.ForMathlib.Entropy.Group.31_0.0OFGje1dXrApGH7","decl":"/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n","proof":":=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _","declId":"PFR.ForMathlib.Entropy.Group.38_0.0OFGje1dXrApGH7","decl":"/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n","proof":":=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _","declId":"PFR.ForMathlib.Entropy.Group.44_0.0OFGje1dXrApGH7","decl":"/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n","proof":":= by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)","declId":"PFR.ForMathlib.Entropy.Group.50_0.0OFGje1dXrApGH7","decl":"/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n","proof":":= by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)","declId":"PFR.ForMathlib.Entropy.Group.57_0.0OFGje1dXrApGH7","decl":"/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n","proof":":= by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)","declId":"PFR.ForMathlib.Entropy.Group.64_0.0OFGje1dXrApGH7","decl":"/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n","proof":":= by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)","declId":"PFR.ForMathlib.Entropy.Group.71_0.0OFGje1dXrApGH7","decl":"/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n","proof":":=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _","declId":"PFR.ForMathlib.Entropy.Group.78_0.0OFGje1dXrApGH7","decl":"/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n","proof":":=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _","declId":"PFR.ForMathlib.Entropy.Group.84_0.0OFGje1dXrApGH7","decl":"/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n","proof":":=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective","declId":"PFR.ForMathlib.Entropy.Group.90_0.0OFGje1dXrApGH7","decl":"/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n","proof":":= by rw [← inv_div]; exact entropy_inv (hY.div hX)","declId":"PFR.ForMathlib.Entropy.Group.95_0.0OFGje1dXrApGH7","decl":"/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n","proof":":=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective","declId":"PFR.ForMathlib.Entropy.Group.105_0.0OFGje1dXrApGH7","decl":"/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n","proof":":=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective","declId":"PFR.ForMathlib.Entropy.Group.111_0.0OFGje1dXrApGH7","decl":"/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n","proof":":=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective","declId":"PFR.ForMathlib.Entropy.Group.117_0.0OFGje1dXrApGH7","decl":"/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n","proof":":=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective","declId":"PFR.ForMathlib.Entropy.Group.123_0.0OFGje1dXrApGH7","decl":"/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n","proof":":= by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel","declId":"PFR.ForMathlib.Entropy.Group.133_0.0OFGje1dXrApGH7","decl":"/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n","proof":":= by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY","declId":"PFR.ForMathlib.Entropy.Group.146_0.0OFGje1dXrApGH7","decl":"/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n","proof":":= by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX","declId":"PFR.ForMathlib.Entropy.Group.153_0.0OFGje1dXrApGH7","decl":"/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n","proof":":= by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY","declId":"PFR.ForMathlib.Entropy.Group.160_0.0OFGje1dXrApGH7","decl":"/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY\n\n","proof":":= by\n  rw [mutualInfo_comm hX hY, entropy_sub_mutualInfo_eq_condEntropy hY hX,\n    ← condEntropy_div_left hY hX]\n  exact condEntropy_le_entropy _ (hX.div hY) hX","declId":"PFR.ForMathlib.Entropy.Group.167_0.0OFGje1dXrApGH7","decl":"/-- $$H[Y] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [mutualInfo_comm hX hY, entropy_sub_mutualInfo_eq_condEntropy hY hX,\n    ← condEntropy_div_left hY hX]\n  exact condEntropy_le_entropy _ (hX.div hY) hX\n\n","proof":":= by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_mul hX hY, entropy_sub_mutualInfo_le_entropy_mul' hX hY⟩","declId":"PFR.ForMathlib.Entropy.Group.175_0.0OFGje1dXrApGH7","decl":"/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [mutualInfo_comm hX hY, entropy_sub_mutualInfo_eq_condEntropy hY hX,\n    ← condEntropy_div_left hY hX]\n  exact condEntropy_le_entropy _ (hX.div hY) hX\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_mul hX hY, entropy_sub_mutualInfo_le_entropy_mul' hX hY⟩\n\n","proof":":= by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_div hX hY, entropy_sub_mutualInfo_le_entropy_div' hX hY⟩","declId":"PFR.ForMathlib.Entropy.Group.182_0.0OFGje1dXrApGH7","decl":"/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [mutualInfo_comm hX hY, entropy_sub_mutualInfo_eq_condEntropy hY hX,\n    ← condEntropy_div_left hY hX]\n  exact condEntropy_le_entropy _ (hX.div hY) hX\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_mul hX hY, entropy_sub_mutualInfo_le_entropy_mul' hX hY⟩\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_div hX hY, entropy_sub_mutualInfo_le_entropy_div' hX hY⟩\n\n","proof":":= by\n  have : IsProbabilityMeasure (μ.map Z) := isProbabilityMeasure_map hZ.aemeasurable\n  rw [condMutualInfo_comm hX hY, condEntropy_eq_kernel_entropy hX hZ,\n    condEntropy_eq_kernel_entropy hY hZ, condMutualInfo_eq_kernel_mutualInfo hY hX hZ,\n    condEntropy_eq_kernel_entropy (show Measurable (X * Y) from hX.mul hY) hZ]\n  rw [kernel.entropy_congr (condDistrib_snd_ae_eq hY hX hZ μ).symm,\n    kernel.entropy_congr (condDistrib_fst_ae_eq hY hX hZ μ).symm,\n    max_comm]\n  refine (kernel.max_entropy_sub_mutualInfo_le_entropy_mul' _ _ ?_).trans_eq ?_\n  . exact kernel.aefiniteKernelSupport_condDistrib _ _ _ (hY.prod_mk hX) hZ\n  have h := condDistrib_comp (hY.prod_mk hX) hZ μ (fun x ↦ x.2 * x.1)\n  rw [kernel.entropy_congr h.symm]\n  rfl","declId":"PFR.ForMathlib.Entropy.Group.189_0.0OFGje1dXrApGH7","decl":"/-- $$\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\leq H[X * Y | Z]$$ -/\n@[to_additive \"$$\\\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\\\leq H[X + Y | Z]$$\"]\nlemma max_condEntropy_sub_condMutualInfo_le_condEntropy_mul {Z : Ω → T} [FiniteRange Z]\n    (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) :\n    max H[X | Z ; μ] H[Y | Z ; μ] - I[X : Y | Z ; μ] ≤ H[X * Y | Z ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [mutualInfo_comm hX hY, entropy_sub_mutualInfo_eq_condEntropy hY hX,\n    ← condEntropy_div_left hY hX]\n  exact condEntropy_le_entropy _ (hX.div hY) hX\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_mul hX hY, entropy_sub_mutualInfo_le_entropy_mul' hX hY⟩\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_div hX hY, entropy_sub_mutualInfo_le_entropy_div' hX hY⟩\n\n/-- $$\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\leq H[X * Y | Z]$$ -/\n@[to_additive \"$$\\\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\\\leq H[X + Y | Z]$$\"]\nlemma max_condEntropy_sub_condMutualInfo_le_condEntropy_mul {Z : Ω → T} [FiniteRange Z]\n    (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) :\n    max H[X | Z ; μ] H[Y | Z ; μ] - I[X : Y | Z ; μ] ≤ H[X * Y | Z ; μ] := by\n  have : IsProbabilityMeasure (μ.map Z) := isProbabilityMeasure_map hZ.aemeasurable\n  rw [condMutualInfo_comm hX hY, condEntropy_eq_kernel_entropy hX hZ,\n    condEntropy_eq_kernel_entropy hY hZ, condMutualInfo_eq_kernel_mutualInfo hY hX hZ,\n    condEntropy_eq_kernel_entropy (show Measurable (X * Y) from hX.mul hY) hZ]\n  rw [kernel.entropy_congr (condDistrib_snd_ae_eq hY hX hZ μ).symm,\n    kernel.entropy_congr (condDistrib_fst_ae_eq hY hX hZ μ).symm,\n    max_comm]\n  refine (kernel.max_entropy_sub_mutualInfo_le_entropy_mul' _ _ ?_).trans_eq ?_\n  . exact kernel.aefiniteKernelSupport_condDistrib _ _ _ (hY.prod_mk hX) hZ\n  have h := condDistrib_comp (hY.prod_mk hX) hZ μ (fun x ↦ x.2 * x.1)\n  rw [kernel.entropy_congr h.symm]\n  rfl\n\n","proof":":= by\n  have : IsProbabilityMeasure (μ.map Z) := isProbabilityMeasure_map hZ.aemeasurable\n  rw [condMutualInfo_comm hX hY, condEntropy_eq_kernel_entropy hX hZ,\n    condEntropy_eq_kernel_entropy hY hZ, condMutualInfo_eq_kernel_mutualInfo hY hX hZ,\n    condEntropy_eq_kernel_entropy ?_ hZ]\n  swap ; · exact hX.div hY\n  rw [kernel.entropy_congr (condDistrib_snd_ae_eq hY hX hZ μ).symm,\n    kernel.entropy_congr (condDistrib_fst_ae_eq hY hX hZ μ).symm, max_comm]\n  refine (kernel.max_entropy_sub_mutualInfo_le_entropy_div _ _ ?_).trans_eq ?_\n  . exact kernel.aefiniteKernelSupport_condDistrib _ _ _ (hY.prod_mk hX) hZ\n  rw [kernel.entropy_div_comm]\n  have h := condDistrib_comp (hY.prod_mk hX) hZ μ (fun x ↦ x.2 / x.1)\n  rw [kernel.entropy_congr h.symm]\n  rfl","declId":"PFR.ForMathlib.Entropy.Group.207_0.0OFGje1dXrApGH7","decl":"/-- $$\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\leq H[X / Y | Z]$$ -/\n@[to_additive \"$$\\\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\\\leq H[X - Y | Z]$$\"]\nlemma max_condEntropy_sub_condMutualInfo_le_condEntropy_div {Z : Ω → T}\n    (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z)\n    [IsProbabilityMeasure μ] [FiniteRange Z] :\n    (max H[X | Z ; μ] H[Y | Z ; μ]) - I[X : Y | Z ; μ] ≤ H[X / Y | Z ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [mutualInfo_comm hX hY, entropy_sub_mutualInfo_eq_condEntropy hY hX,\n    ← condEntropy_div_left hY hX]\n  exact condEntropy_le_entropy _ (hX.div hY) hX\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_mul hX hY, entropy_sub_mutualInfo_le_entropy_mul' hX hY⟩\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_div hX hY, entropy_sub_mutualInfo_le_entropy_div' hX hY⟩\n\n/-- $$\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\leq H[X * Y | Z]$$ -/\n@[to_additive \"$$\\\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\\\leq H[X + Y | Z]$$\"]\nlemma max_condEntropy_sub_condMutualInfo_le_condEntropy_mul {Z : Ω → T} [FiniteRange Z]\n    (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) :\n    max H[X | Z ; μ] H[Y | Z ; μ] - I[X : Y | Z ; μ] ≤ H[X * Y | Z ; μ] := by\n  have : IsProbabilityMeasure (μ.map Z) := isProbabilityMeasure_map hZ.aemeasurable\n  rw [condMutualInfo_comm hX hY, condEntropy_eq_kernel_entropy hX hZ,\n    condEntropy_eq_kernel_entropy hY hZ, condMutualInfo_eq_kernel_mutualInfo hY hX hZ,\n    condEntropy_eq_kernel_entropy (show Measurable (X * Y) from hX.mul hY) hZ]\n  rw [kernel.entropy_congr (condDistrib_snd_ae_eq hY hX hZ μ).symm,\n    kernel.entropy_congr (condDistrib_fst_ae_eq hY hX hZ μ).symm,\n    max_comm]\n  refine (kernel.max_entropy_sub_mutualInfo_le_entropy_mul' _ _ ?_).trans_eq ?_\n  . exact kernel.aefiniteKernelSupport_condDistrib _ _ _ (hY.prod_mk hX) hZ\n  have h := condDistrib_comp (hY.prod_mk hX) hZ μ (fun x ↦ x.2 * x.1)\n  rw [kernel.entropy_congr h.symm]\n  rfl\n\n/-- $$\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\leq H[X / Y | Z]$$ -/\n@[to_additive \"$$\\\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\\\leq H[X - Y | Z]$$\"]\nlemma max_condEntropy_sub_condMutualInfo_le_condEntropy_div {Z : Ω → T}\n    (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z)\n    [IsProbabilityMeasure μ] [FiniteRange Z] :\n    (max H[X | Z ; μ] H[Y | Z ; μ]) - I[X : Y | Z ; μ] ≤ H[X / Y | Z ; μ] := by\n  have : IsProbabilityMeasure (μ.map Z) := isProbabilityMeasure_map hZ.aemeasurable\n  rw [condMutualInfo_comm hX hY, condEntropy_eq_kernel_entropy hX hZ,\n    condEntropy_eq_kernel_entropy hY hZ, condMutualInfo_eq_kernel_mutualInfo hY hX hZ,\n    condEntropy_eq_kernel_entropy ?_ hZ]\n  swap ; · exact hX.div hY\n  rw [kernel.entropy_congr (condDistrib_snd_ae_eq hY hX hZ μ).symm,\n    kernel.entropy_congr (condDistrib_fst_ae_eq hY hX hZ μ).symm, max_comm]\n  refine (kernel.max_entropy_sub_mutualInfo_le_entropy_div _ _ ?_).trans_eq ?_\n  . exact kernel.aefiniteKernelSupport_condDistrib _ _ _ (hY.prod_mk hX) hZ\n  rw [kernel.entropy_div_comm]\n  have h := condDistrib_comp (hY.prod_mk hX) hZ μ (fun x ↦ x.2 / x.1)\n  rw [kernel.entropy_congr h.symm]\n  rfl\n\n","proof":":= by\n  simpa [h.mutualInfo_eq_zero hX hY] using max_entropy_sub_mutualInfo_le_entropy_mul hX hY (μ := μ)","declId":"PFR.ForMathlib.Entropy.Group.227_0.0OFGje1dXrApGH7","decl":"/-- If $X, Y$ are independent, then $$\\max(H[X], H[Y]) \\leq H[X * Y]$$. -/\n@[to_additive \"If $X, Y$ are independent, then $$\\\\max(H[X], H[Y]) \\\\leq H[X + Y]$$\"]\nlemma max_entropy_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) (h : IndepFun X Y μ) :\n    max H[X ; μ] H[Y ; μ] ≤ H[X * Y ; μ] "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.Basic\nimport PFR.ForMathlib.Entropy.Kernel.Group\n\nopen Function MeasureTheory Measure Real\nopen scoped ENNReal NNReal Topology ProbabilityTheory BigOperators\n\nuniverse uΩ uS uT uU\nvariable {Ω : Type uΩ} {G : Type uS} {T : Type uT} {U : Type uU} [mΩ : MeasurableSpace Ω]\n  [Countable G] [Countable T] [Countable U]\n  [Nonempty G] [Nonempty T] [Nonempty U]\n  [MeasurableSpace G] [MeasurableSpace T] [MeasurableSpace U]\n  [MeasurableSingletonClass G] [MeasurableSingletonClass T] [MeasurableSingletonClass U]\n  [Group G] {X Y : Ω → G} {μ : Measure Ω}\n  [FiniteRange X] [FiniteRange Y]\n\nnamespace ProbabilityTheory\nsection entropy\n\n@[to_additive (attr := simp)]\nlemma entropy_mul_const (hX : Measurable X) (c : G) :\n    H[X * fun _ ↦ c; μ] = H[X ; μ] := by\n  apply entropy_comp_of_injective μ hX _ $ mul_left_injective c\n\n/-- $H[X, X * Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X + Y] = H[X, Y]$\"]\nlemma entropy_mul_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X * Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[X, Y * X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y + X] = H[X, Y]$\"]\nlemma entropy_mul_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y * X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.mulRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ $ Equiv.injective _\n\n/-- $H[Y * X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y + X, Y] = H[X, Y]$\"]\nlemma entropy_mul_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y * X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.mul hX) hY _).trans $ (entropy_mul_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X * Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X + Y, Y] = H[X, Y]$\"]\nlemma entropy_mul_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X * Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.mul hY) hY _).trans $ (entropy_mul_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X, Y⁻¹] = H[X, Y]$ -/\n@[to_additive \"$H[X, -Y] = H[X, Y]$\"]\nlemma entropy_inv_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y⁻¹⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodCongr (Equiv.inv _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X⁻¹, Y] = H[X, Y]$ -/\n@[to_additive \"$H[-X, Y] = H[X, Y]$\"]\nlemma entropy_inv_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X⁻¹, Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.inv _).prodCongr (Equiv.refl _) ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, X / Y] = H[X, Y]$ -/\n@[to_additive \"$H[X, X - Y] = H[X, Y]$\"]\nlemma entropy_div_right (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, X / Y⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divLeft ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[X, Y / X] = H[X, Y]$ -/\n@[to_additive \"$H[X, Y - X] = H[X, Y]$\"]\nlemma entropy_div_right' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X, Y / X⟩; μ] = H[⟨X, Y⟩ ; μ] := by\n  change H[(Equiv.refl _).prodShear Equiv.divRight ∘ ⟨X, Y⟩ ; μ] = H[⟨X, Y⟩ ; μ]\n  exact entropy_comp_of_injective μ (hX.prod_mk hY) _ (Equiv.injective _)\n\n/-- $H[Y / X, Y] = H[X, Y]$ -/\n@[to_additive \"$H[Y - X, Y] = H[X, Y]$\"]\nlemma entropy_div_left (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨Y / X, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hY.div hX) hY _).trans $ (entropy_div_right hY hX _).trans $ entropy_comm hY hX _\n\n/-- $H[X / Y, Y] = H[X, Y]$ -/\n@[to_additive \"$H[X - Y, Y] = H[X, Y]$\"]\nlemma entropy_div_left' (hX : Measurable X) (hY : Measurable Y) (μ : Measure Ω) :\n    H[⟨X / Y, Y⟩; μ] = H[⟨X, Y⟩ ; μ] :=\n  (entropy_comm (hX.div hY) hY _).trans $ (entropy_div_right' hY hX _).trans $ entropy_comm hY hX _\n\n/-- If $X$ is $G$-valued, then $H[X⁻¹]=H[X]$. -/\n@[to_additive \"If $X$ is $G$-valued, then $H[-X]=H[X]$.\"]\nlemma entropy_inv (hX : Measurable X) : H[X⁻¹ ; μ] = H[X ; μ] :=\n  entropy_comp_of_injective μ hX (·⁻¹) inv_injective\n\n/-- $$H[X / Y] = H[Y / X]$$ -/\n@[to_additive \"$$H[X - Y] = H[Y - X]$$\"]\nlemma entropy_div_comm {Y : Ω → G} (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y ; μ] = H[Y / X ; μ] := by rw [← inv_div]; exact entropy_inv (hY.div hX)\n\nend entropy\n\nsection condEntropy\nvariable [IsFiniteMeasure μ]\n\n/-- $$H[Y * X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y + X | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_left (hX : Measurable X) (hY : Measurable Y) :\n     H[Y * X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y * x) mul_right_injective\n\n/-- $$H[X * Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X + Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_mul_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X * Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x * y) mul_left_injective\n\n/-- $$H[Y / X | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[Y - X | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_left (hX : Measurable X) (hY : Measurable Y) :\n    H[Y / X | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ y / x) fun _ ↦ div_right_injective\n\n/-- $$H[X / Y | Y] = H[X | Y]$$ -/\n@[to_additive \"$$H[X - Y | Y] = H[X | Y]$$\"]\nlemma condEntropy_div_right (hX : Measurable X) (hY : Measurable Y) :\n    H[X / Y | Y ; μ] = H[X | Y ; μ] :=\n  condEntropy_of_injective μ hX hY (fun y x ↦ x / y) fun _ ↦ div_left_injective\n\nend condEntropy\n\nsection mutualInfo\n\n/-- $I[X : X * Y] = H[X * Y] - H[Y]$ iff $X, Y$ are independent. -/\n@[to_additive \"$I[X : X + Y] = H[X + Y] - H[Y]$ iff $X, Y$ are independent.\"]\nlemma mutualInfo_mul_right (hX : Measurable X) (hY : Measurable Y) {μ : Measure Ω}\n    [IsProbabilityMeasure μ] (h : IndepFun X Y μ) :\n    I[X : X * Y ; μ] = H[X * Y ; μ] - H[Y ; μ] := by\n  rw [mutualInfo_def, entropy_mul_right hX hY, h.entropy_pair_eq_add hX hY]\n  abel\n\nend mutualInfo\n\nsection IsProbabilityMeasure\nvariable [IsProbabilityMeasure μ] {Y : Ω → G} [FiniteRange Y]\n\n/-- $$H[X] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_mul_right hX hY]\n  exact condEntropy_le_entropy _ (hX.mul hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_mul' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy' hX hY, ← condEntropy_mul_left hY hX]\n  exact condEntropy_le_entropy _ (hX.mul hY) hX\n\n/-- $$H[X] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[X] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    H[X ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [entropy_sub_mutualInfo_eq_condEntropy hX hY, ← condEntropy_div_right hX hY]\n  exact condEntropy_le_entropy _ (hX.div hY) hY\n\n/-- $$H[Y] - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$H[Y] - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma entropy_sub_mutualInfo_le_entropy_div' (hX : Measurable X) (hY : Measurable Y) :\n    H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [mutualInfo_comm hX hY, entropy_sub_mutualInfo_eq_condEntropy hY hX,\n    ← condEntropy_div_left hY hX]\n  exact condEntropy_le_entropy _ (hX.div hY) hX\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X * Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X + Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X * Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_mul hX hY, entropy_sub_mutualInfo_le_entropy_mul' hX hY⟩\n\n/-- $$\\max(H[X], H[Y]) - I[X : Y] \\leq H[X / Y]$$ -/\n@[to_additive \"$$\\\\max(H[X], H[Y]) - I[X : Y] \\\\leq H[X - Y]$$\"]\nlemma max_entropy_sub_mutualInfo_le_entropy_div (hX : Measurable X) (hY : Measurable Y) :\n    max H[X ; μ] H[Y ; μ] - I[X : Y ; μ] ≤ H[X / Y ; μ] := by\n  rw [← max_sub_sub_right, max_le_iff]\n  exact ⟨entropy_sub_mutualInfo_le_entropy_div hX hY, entropy_sub_mutualInfo_le_entropy_div' hX hY⟩\n\n/-- $$\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\leq H[X * Y | Z]$$ -/\n@[to_additive \"$$\\\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\\\leq H[X + Y | Z]$$\"]\nlemma max_condEntropy_sub_condMutualInfo_le_condEntropy_mul {Z : Ω → T} [FiniteRange Z]\n    (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z) :\n    max H[X | Z ; μ] H[Y | Z ; μ] - I[X : Y | Z ; μ] ≤ H[X * Y | Z ; μ] := by\n  have : IsProbabilityMeasure (μ.map Z) := isProbabilityMeasure_map hZ.aemeasurable\n  rw [condMutualInfo_comm hX hY, condEntropy_eq_kernel_entropy hX hZ,\n    condEntropy_eq_kernel_entropy hY hZ, condMutualInfo_eq_kernel_mutualInfo hY hX hZ,\n    condEntropy_eq_kernel_entropy (show Measurable (X * Y) from hX.mul hY) hZ]\n  rw [kernel.entropy_congr (condDistrib_snd_ae_eq hY hX hZ μ).symm,\n    kernel.entropy_congr (condDistrib_fst_ae_eq hY hX hZ μ).symm,\n    max_comm]\n  refine (kernel.max_entropy_sub_mutualInfo_le_entropy_mul' _ _ ?_).trans_eq ?_\n  . exact kernel.aefiniteKernelSupport_condDistrib _ _ _ (hY.prod_mk hX) hZ\n  have h := condDistrib_comp (hY.prod_mk hX) hZ μ (fun x ↦ x.2 * x.1)\n  rw [kernel.entropy_congr h.symm]\n  rfl\n\n/-- $$\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\leq H[X / Y | Z]$$ -/\n@[to_additive \"$$\\\\max(H[X | Z], H[Y | Z]) - I[X : Y | Z] \\\\leq H[X - Y | Z]$$\"]\nlemma max_condEntropy_sub_condMutualInfo_le_condEntropy_div {Z : Ω → T}\n    (hX : Measurable X) (hY : Measurable Y) (hZ : Measurable Z)\n    [IsProbabilityMeasure μ] [FiniteRange Z] :\n    (max H[X | Z ; μ] H[Y | Z ; μ]) - I[X : Y | Z ; μ] ≤ H[X / Y | Z ; μ] := by\n  have : IsProbabilityMeasure (μ.map Z) := isProbabilityMeasure_map hZ.aemeasurable\n  rw [condMutualInfo_comm hX hY, condEntropy_eq_kernel_entropy hX hZ,\n    condEntropy_eq_kernel_entropy hY hZ, condMutualInfo_eq_kernel_mutualInfo hY hX hZ,\n    condEntropy_eq_kernel_entropy ?_ hZ]\n  swap ; · exact hX.div hY\n  rw [kernel.entropy_congr (condDistrib_snd_ae_eq hY hX hZ μ).symm,\n    kernel.entropy_congr (condDistrib_fst_ae_eq hY hX hZ μ).symm, max_comm]\n  refine (kernel.max_entropy_sub_mutualInfo_le_entropy_div _ _ ?_).trans_eq ?_\n  . exact kernel.aefiniteKernelSupport_condDistrib _ _ _ (hY.prod_mk hX) hZ\n  rw [kernel.entropy_div_comm]\n  have h := condDistrib_comp (hY.prod_mk hX) hZ μ (fun x ↦ x.2 / x.1)\n  rw [kernel.entropy_congr h.symm]\n  rfl\n\n/-- If $X, Y$ are independent, then $$\\max(H[X], H[Y]) \\leq H[X * Y]$$. -/\n@[to_additive \"If $X, Y$ are independent, then $$\\\\max(H[X], H[Y]) \\\\leq H[X + Y]$$\"]\nlemma max_entropy_le_entropy_mul (hX : Measurable X) (hY : Measurable Y) (h : IndepFun X Y μ) :\n    max H[X ; μ] H[Y ; μ] ≤ H[X * Y ; μ] := by\n  simpa [h.mutualInfo_eq_zero hX hY] using max_entropy_sub_mutualInfo_le_entropy_mul hX hY (μ := μ)\n\n","proof":":= by\n  simpa [h.mutualInfo_eq_zero hX hY] using max_entropy_sub_mutualInfo_le_entropy_div hX hY (μ := μ)","declId":"PFR.ForMathlib.Entropy.Group.233_0.0OFGje1dXrApGH7","decl":"/-- If $X, Y$ are independent, then $$\\max(H[X], H[Y]) \\leq H[X / Y]$$. -/\n@[to_additive \"If $X, Y$ are independent, then $$\\\\max(H[X], H[Y]) \\\\leq H[X - Y]$$.\"]\nlemma max_entropy_le_entropy_div (hX : Measurable X) (hY : Measurable Y) (h : IndepFun X Y μ) :\n    max H[X ; μ] H[Y ; μ] ≤ H[X / Y ; μ] "}
