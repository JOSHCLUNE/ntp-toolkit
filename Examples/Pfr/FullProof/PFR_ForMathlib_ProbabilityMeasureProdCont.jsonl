{"srcUpToDecl":"import PFR.ForMathlib.CompactProb\nimport PFR.ForMathlib.FiniteMeasureProd\n\n/-!\n# Continuity of products of probability measures on finite types\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction BigOperators\n\nnamespace MeasureTheory\n\n","proof":":= by\n  constructor <;> intro h\n  ¬∑ exact fun a ‚Ü¶ ((continuous_pmf_apply a).continuousAt (x := Œº)).tendsto.comp h\n  ¬∑ apply ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto.mpr\n    intro f\n    apply tendsto_lintegral_of_forall_of_finite\n    intro a\n    -- TODO: rename `ENNReal.continuous_coe` to `ENNReal.continuous_ofNNReal`?\n    convert ENNReal.continuous_coe.continuousAt.tendsto.comp (h a)\n    simp only [Function.comp_apply, ne_eq, ennreal_coeFn_eq_coeFn_toMeasure, coe_toNNReal]\n    simp only [ne_eq, ennreal_coeFn_eq_coeFn_toMeasure]","declId":"PFR.ForMathlib.ProbabilityMeasureProdCont.13_0.bGeGmF9RmkelOhj","decl":"/-- Probability measures on a finite space tend to a limit if and only if the probability masses\nof all points tend to the corresponding limits. -/\nlemma ProbabilityMeasure.tendsto_iff_forall_apply_tendsto {Œπ Œ± : Type*} {L : Filter Œπ} [Finite Œ±]\n    [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) :\n    Tendsto Œºs L (ùìù Œº) ‚Üî ‚àÄ a, Tendsto (Œºs ¬∑ {a}) L (ùìù (Œº {a})) "}
{"srcUpToDecl":"import PFR.ForMathlib.CompactProb\nimport PFR.ForMathlib.FiniteMeasureProd\n\n/-!\n# Continuity of products of probability measures on finite types\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction BigOperators\n\nnamespace MeasureTheory\n\n/-- Probability measures on a finite space tend to a limit if and only if the probability masses\nof all points tend to the corresponding limits. -/\nlemma ProbabilityMeasure.tendsto_iff_forall_apply_tendsto {Œπ Œ± : Type*} {L : Filter Œπ} [Finite Œ±]\n    [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) :\n    Tendsto Œºs L (ùìù Œº) ‚Üî ‚àÄ a, Tendsto (Œºs ¬∑ {a}) L (ùìù (Œº {a})) := by\n  constructor <;> intro h\n  ¬∑ exact fun a ‚Ü¶ ((continuous_pmf_apply a).continuousAt (x := Œº)).tendsto.comp h\n  ¬∑ apply ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto.mpr\n    intro f\n    apply tendsto_lintegral_of_forall_of_finite\n    intro a\n    -- TODO: rename `ENNReal.continuous_coe` to `ENNReal.continuous_ofNNReal`?\n    convert ENNReal.continuous_coe.continuousAt.tendsto.comp (h a)\n    simp only [Function.comp_apply, ne_eq, ennreal_coeFn_eq_coeFn_toMeasure, coe_toNNReal]\n    simp only [ne_eq, ennreal_coeFn_eq_coeFn_toMeasure]\n\n","proof":":= by\n  apply (ProbabilityMeasure.tendsto_iff_forall_apply_tendsto _ _).mpr\n  intro ab\n  have aux : {ab} = {ab.1} √óÀ¢ {ab.2} := toFinset_inj.mp rfl\n  simp_rw [aux, prod_prod]\n  have obs_Œºs := ((continuous_pmf_apply ab.1).continuousAt (x := Œº)).tendsto.comp Œºs_lim\n  have obs_ŒΩs := ((continuous_pmf_apply ab.2).continuousAt (x := ŒΩ)).tendsto.comp ŒΩs_lim\n  exact tendsto_mul.comp (Tendsto.prod_mk_nhds obs_Œºs obs_ŒΩs)","declId":"PFR.ForMathlib.ProbabilityMeasureProdCont.30_0.bGeGmF9RmkelOhj","decl":"/-- If probability measures on two finite spaces tend to limits, then the products of them\non the product space tend to the product of the limits.\nTODO: In Mathlib, this should be done on all separable metrizable spaces. -/\nlemma ProbabilityMeasure.tendsto_prod_of_tendsto_of_tendsto\n    {Œπ : Type*} {L : Filter Œπ} {Œ± Œ≤ : Type*}\n    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    [Finite Œ≤] [TopologicalSpace Œ≤] [DiscreteTopology Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤]\n    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) (Œºs_lim : Tendsto Œºs L (ùìù Œº))\n    (ŒΩs : Œπ ‚Üí ProbabilityMeasure Œ≤) (ŒΩ : ProbabilityMeasure Œ≤) (ŒΩs_lim : Tendsto ŒΩs L (ùìù ŒΩ)) :\n    Tendsto (fun i ‚Ü¶ (Œºs i).prod (ŒΩs i)) L (ùìù (Œº.prod ŒΩ)) "}
{"srcUpToDecl":"import PFR.ForMathlib.CompactProb\nimport PFR.ForMathlib.FiniteMeasureProd\n\n/-!\n# Continuity of products of probability measures on finite types\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction BigOperators\n\nnamespace MeasureTheory\n\n/-- Probability measures on a finite space tend to a limit if and only if the probability masses\nof all points tend to the corresponding limits. -/\nlemma ProbabilityMeasure.tendsto_iff_forall_apply_tendsto {Œπ Œ± : Type*} {L : Filter Œπ} [Finite Œ±]\n    [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) :\n    Tendsto Œºs L (ùìù Œº) ‚Üî ‚àÄ a, Tendsto (Œºs ¬∑ {a}) L (ùìù (Œº {a})) := by\n  constructor <;> intro h\n  ¬∑ exact fun a ‚Ü¶ ((continuous_pmf_apply a).continuousAt (x := Œº)).tendsto.comp h\n  ¬∑ apply ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto.mpr\n    intro f\n    apply tendsto_lintegral_of_forall_of_finite\n    intro a\n    -- TODO: rename `ENNReal.continuous_coe` to `ENNReal.continuous_ofNNReal`?\n    convert ENNReal.continuous_coe.continuousAt.tendsto.comp (h a)\n    simp only [Function.comp_apply, ne_eq, ennreal_coeFn_eq_coeFn_toMeasure, coe_toNNReal]\n    simp only [ne_eq, ennreal_coeFn_eq_coeFn_toMeasure]\n\n/-- If probability measures on two finite spaces tend to limits, then the products of them\non the product space tend to the product of the limits.\nTODO: In Mathlib, this should be done on all separable metrizable spaces. -/\nlemma ProbabilityMeasure.tendsto_prod_of_tendsto_of_tendsto\n    {Œπ : Type*} {L : Filter Œπ} {Œ± Œ≤ : Type*}\n    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    [Finite Œ≤] [TopologicalSpace Œ≤] [DiscreteTopology Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤]\n    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) (Œºs_lim : Tendsto Œºs L (ùìù Œº))\n    (ŒΩs : Œπ ‚Üí ProbabilityMeasure Œ≤) (ŒΩ : ProbabilityMeasure Œ≤) (ŒΩs_lim : Tendsto ŒΩs L (ùìù ŒΩ)) :\n    Tendsto (fun i ‚Ü¶ (Œºs i).prod (ŒΩs i)) L (ùìù (Œº.prod ŒΩ)) := by\n  apply (ProbabilityMeasure.tendsto_iff_forall_apply_tendsto _ _).mpr\n  intro ab\n  have aux : {ab} = {ab.1} √óÀ¢ {ab.2} := toFinset_inj.mp rfl\n  simp_rw [aux, prod_prod]\n  have obs_Œºs := ((continuous_pmf_apply ab.1).continuousAt (x := Œº)).tendsto.comp Œºs_lim\n  have obs_ŒΩs := ((continuous_pmf_apply ab.2).continuousAt (x := ŒΩ)).tendsto.comp ŒΩs_lim\n  exact tendsto_mul.comp (Tendsto.prod_mk_nhds obs_Œºs obs_ŒΩs)\n\n-- TODO: Prove more generally in Mathlib.\n","proof":":= by\n  cases nonempty_fintype Œ±; exact probabilityMeasureHomeoStdSimplex.symm.t1Space","declId":"PFR.ForMathlib.ProbabilityMeasureProdCont.49_0.bGeGmF9RmkelOhj","decl":"instance t1Space_probabilityMeasure_of_finite {Œ± : Type*}\n    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±] :\n    T1Space (ProbabilityMeasure Œ±) "}
{"srcUpToDecl":"import PFR.ForMathlib.CompactProb\nimport PFR.ForMathlib.FiniteMeasureProd\n\n/-!\n# Continuity of products of probability measures on finite types\n-/\n\nopen MeasureTheory Topology Metric Filter Set ENNReal NNReal\nopen scoped Topology ENNReal NNReal BoundedContinuousFunction BigOperators\n\nnamespace MeasureTheory\n\n/-- Probability measures on a finite space tend to a limit if and only if the probability masses\nof all points tend to the corresponding limits. -/\nlemma ProbabilityMeasure.tendsto_iff_forall_apply_tendsto {Œπ Œ± : Type*} {L : Filter Œπ} [Finite Œ±]\n    [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) :\n    Tendsto Œºs L (ùìù Œº) ‚Üî ‚àÄ a, Tendsto (Œºs ¬∑ {a}) L (ùìù (Œº {a})) := by\n  constructor <;> intro h\n  ¬∑ exact fun a ‚Ü¶ ((continuous_pmf_apply a).continuousAt (x := Œº)).tendsto.comp h\n  ¬∑ apply ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto.mpr\n    intro f\n    apply tendsto_lintegral_of_forall_of_finite\n    intro a\n    -- TODO: rename `ENNReal.continuous_coe` to `ENNReal.continuous_ofNNReal`?\n    convert ENNReal.continuous_coe.continuousAt.tendsto.comp (h a)\n    simp only [Function.comp_apply, ne_eq, ennreal_coeFn_eq_coeFn_toMeasure, coe_toNNReal]\n    simp only [ne_eq, ennreal_coeFn_eq_coeFn_toMeasure]\n\n/-- If probability measures on two finite spaces tend to limits, then the products of them\non the product space tend to the product of the limits.\nTODO: In Mathlib, this should be done on all separable metrizable spaces. -/\nlemma ProbabilityMeasure.tendsto_prod_of_tendsto_of_tendsto\n    {Œπ : Type*} {L : Filter Œπ} {Œ± Œ≤ : Type*}\n    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    [Finite Œ≤] [TopologicalSpace Œ≤] [DiscreteTopology Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤]\n    (Œºs : Œπ ‚Üí ProbabilityMeasure Œ±) (Œº : ProbabilityMeasure Œ±) (Œºs_lim : Tendsto Œºs L (ùìù Œº))\n    (ŒΩs : Œπ ‚Üí ProbabilityMeasure Œ≤) (ŒΩ : ProbabilityMeasure Œ≤) (ŒΩs_lim : Tendsto ŒΩs L (ùìù ŒΩ)) :\n    Tendsto (fun i ‚Ü¶ (Œºs i).prod (ŒΩs i)) L (ùìù (Œº.prod ŒΩ)) := by\n  apply (ProbabilityMeasure.tendsto_iff_forall_apply_tendsto _ _).mpr\n  intro ab\n  have aux : {ab} = {ab.1} √óÀ¢ {ab.2} := toFinset_inj.mp rfl\n  simp_rw [aux, prod_prod]\n  have obs_Œºs := ((continuous_pmf_apply ab.1).continuousAt (x := Œº)).tendsto.comp Œºs_lim\n  have obs_ŒΩs := ((continuous_pmf_apply ab.2).continuousAt (x := ŒΩ)).tendsto.comp ŒΩs_lim\n  exact tendsto_mul.comp (Tendsto.prod_mk_nhds obs_Œºs obs_ŒΩs)\n\n-- TODO: Prove more generally in Mathlib.\ninstance t1Space_probabilityMeasure_of_finite {Œ± : Type*}\n    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±] :\n    T1Space (ProbabilityMeasure Œ±) := by\n  cases nonempty_fintype Œ±; exact probabilityMeasureHomeoStdSimplex.symm.t1Space\n\n","proof":":= by\n  rw [continuous_iff_continuousAt]\n  intro ŒºŒΩ\n  apply continuousAt_of_tendsto_nhds (y := ŒºŒΩ.1.prod ŒºŒΩ.2)\n  apply ProbabilityMeasure.tendsto_prod_of_tendsto_of_tendsto\n  ¬∑ apply continuous_fst.tendsto\n  ¬∑ apply continuous_snd.tendsto","declId":"PFR.ForMathlib.ProbabilityMeasureProdCont.54_0.bGeGmF9RmkelOhj","decl":"/-- The product of two probability measures on finite spaces depend continuously on the two\nprobability measures.\nTODO: In Mathlib, this should be done on all separable metrizable spaces. -/\nlemma ProbabilityMeasure.continuous_prod_of_finite {Œ± Œ≤ : Type*}\n    [Finite Œ±] [TopologicalSpace Œ±] [DiscreteTopology Œ±] [MeasurableSpace Œ±] [BorelSpace Œ±]\n    [Finite Œ≤] [TopologicalSpace Œ≤] [DiscreteTopology Œ≤] [MeasurableSpace Œ≤] [BorelSpace Œ≤] :\n    Continuous (fun (‚ü®Œº, ŒΩ‚ü© : ProbabilityMeasure Œ± √ó ProbabilityMeasure Œ≤) ‚Ü¶ (Œº.prod ŒΩ)) "}
