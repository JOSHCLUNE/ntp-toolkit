{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\n","proof":":=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩","declId":"PFR.ForMathlib.CompactProb.24_0.O5debgo3D1CqItN","decl":"lemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\n","proof":":= by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl","declId":"PFR.ForMathlib.CompactProb.29_0.O5debgo3D1CqItN","decl":"lemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\nopen Filter in\n","proof":":= by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)","declId":"PFR.ForMathlib.CompactProb.39_0.O5debgo3D1CqItN","decl":"lemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\n","proof":":= by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)","declId":"PFR.ForMathlib.CompactProb.38_0.O5debgo3D1CqItN","decl":"open Filter in\nlemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\nopen Filter in\nlemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) := by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)\n\nend\n\nsection Fintype\nvariable [Fintype X]\n\n","proof":":= by\n    intro μ\n    refine ⟨fun i ↦ (μ {i}).toReal, by simp, ?_⟩\n    simp only\n    rw [← NNReal.coe_sum, ← ENNReal.toNNReal_sum (fun a _ha ↦ by finiteness)]\n    simp\n  invFun := by\n    intro p\n    refine ⟨∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i, ⟨?_⟩⟩\n    simp only [Measure.coe_finset_sum, Measure.smul_toOuterMeasure, OuterMeasure.coe_smul,\n      Finset.sum_apply, Pi.smul_apply, MeasurableSet.univ, Measure.dirac_apply', Set.mem_univ,\n      Set.indicator_of_mem, Pi.one_apply, smul_eq_mul, mul_one]\n    rw [← ENNReal.toReal_eq_toReal (by simp [ENNReal.sum_eq_top_iff]) ENNReal.one_ne_top,\n        ENNReal.toReal_sum (by simp)]\n    simp_rw [ENNReal.toReal_ofReal (p.2.1 _), p.2.2, ENNReal.one_toReal]\n  left_inv := by\n    intro μ\n    ext s _hs\n    conv_rhs => rw [← Measure.sum_smul_dirac (μ := (μ : Measure X))]\n    simp\n  right_inv := by\n    rintro ⟨p, p_pos, hp⟩\n    ext i\n    simp only [ProbabilityMeasure.coe_mk , Measure.coe_finset_sum, Measure.smul_toOuterMeasure,\n      OuterMeasure.coe_smul, Finset.sum_apply, Pi.smul_apply, MeasurableSet.singleton,\n      Measure.dirac_apply', Set.mem_singleton_iff, smul_eq_mul]\n    rw [Finset.sum_eq_single_of_mem i (Finset.mem_univ i)]\n    · simp only [Set.mem_singleton_iff, Set.indicator_of_mem, Pi.one_apply, mul_one]\n      exact ENNReal.toReal_ofReal (p_pos i)\n    · intro b _ bi\n      simp [bi]","declId":"PFR.ForMathlib.CompactProb.53_0.O5debgo3D1CqItN","decl":"/-- The canonical bijection between the set of probability measures on a fintype and the set of\nnonnegative functions on the points adding up to one. -/\nnoncomputable def probabilityMeasureEquivStdSimplex [Fintype X] [MeasurableSingletonClass X] :\n    ProbabilityMeasure X ≃ stdSimplex ℝ X where\n  toFun "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\nopen Filter in\nlemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) := by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)\n\nend\n\nsection Fintype\nvariable [Fintype X]\n\n/-- The canonical bijection between the set of probability measures on a fintype and the set of\nnonnegative functions on the points adding up to one. -/\nnoncomputable def probabilityMeasureEquivStdSimplex [Fintype X] [MeasurableSingletonClass X] :\n    ProbabilityMeasure X ≃ stdSimplex ℝ X where\n  toFun := by\n    intro μ\n    refine ⟨fun i ↦ (μ {i}).toReal, by simp, ?_⟩\n    simp only\n    rw [← NNReal.coe_sum, ← ENNReal.toNNReal_sum (fun a _ha ↦ by finiteness)]\n    simp\n  invFun := by\n    intro p\n    refine ⟨∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i, ⟨?_⟩⟩\n    simp only [Measure.coe_finset_sum, Measure.smul_toOuterMeasure, OuterMeasure.coe_smul,\n      Finset.sum_apply, Pi.smul_apply, MeasurableSet.univ, Measure.dirac_apply', Set.mem_univ,\n      Set.indicator_of_mem, Pi.one_apply, smul_eq_mul, mul_one]\n    rw [← ENNReal.toReal_eq_toReal (by simp [ENNReal.sum_eq_top_iff]) ENNReal.one_ne_top,\n        ENNReal.toReal_sum (by simp)]\n    simp_rw [ENNReal.toReal_ofReal (p.2.1 _), p.2.2, ENNReal.one_toReal]\n  left_inv := by\n    intro μ\n    ext s _hs\n    conv_rhs => rw [← Measure.sum_smul_dirac (μ := (μ : Measure X))]\n    simp\n  right_inv := by\n    rintro ⟨p, p_pos, hp⟩\n    ext i\n    simp only [ProbabilityMeasure.coe_mk , Measure.coe_finset_sum, Measure.smul_toOuterMeasure,\n      OuterMeasure.coe_smul, Finset.sum_apply, Pi.smul_apply, MeasurableSet.singleton,\n      Measure.dirac_apply', Set.mem_singleton_iff, smul_eq_mul]\n    rw [Finset.sum_eq_single_of_mem i (Finset.mem_univ i)]\n    · simp only [Set.mem_singleton_iff, Set.indicator_of_mem, Pi.one_apply, mul_one]\n      exact ENNReal.toReal_ofReal (p_pos i)\n    · intro b _ bi\n      simp [bi]\n\n","proof":":= rfl","declId":"PFR.ForMathlib.CompactProb.89_0.O5debgo3D1CqItN","decl":"@[simp] lemma probabilityMeasureEquivStdSimplex_symm_coe_apply [MeasurableSingletonClass X]\n    (p : stdSimplex ℝ X) :\n    (probabilityMeasureEquivStdSimplex.symm p : Measure X) =\n       ∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\nopen Filter in\nlemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) := by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)\n\nend\n\nsection Fintype\nvariable [Fintype X]\n\n/-- The canonical bijection between the set of probability measures on a fintype and the set of\nnonnegative functions on the points adding up to one. -/\nnoncomputable def probabilityMeasureEquivStdSimplex [Fintype X] [MeasurableSingletonClass X] :\n    ProbabilityMeasure X ≃ stdSimplex ℝ X where\n  toFun := by\n    intro μ\n    refine ⟨fun i ↦ (μ {i}).toReal, by simp, ?_⟩\n    simp only\n    rw [← NNReal.coe_sum, ← ENNReal.toNNReal_sum (fun a _ha ↦ by finiteness)]\n    simp\n  invFun := by\n    intro p\n    refine ⟨∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i, ⟨?_⟩⟩\n    simp only [Measure.coe_finset_sum, Measure.smul_toOuterMeasure, OuterMeasure.coe_smul,\n      Finset.sum_apply, Pi.smul_apply, MeasurableSet.univ, Measure.dirac_apply', Set.mem_univ,\n      Set.indicator_of_mem, Pi.one_apply, smul_eq_mul, mul_one]\n    rw [← ENNReal.toReal_eq_toReal (by simp [ENNReal.sum_eq_top_iff]) ENNReal.one_ne_top,\n        ENNReal.toReal_sum (by simp)]\n    simp_rw [ENNReal.toReal_ofReal (p.2.1 _), p.2.2, ENNReal.one_toReal]\n  left_inv := by\n    intro μ\n    ext s _hs\n    conv_rhs => rw [← Measure.sum_smul_dirac (μ := (μ : Measure X))]\n    simp\n  right_inv := by\n    rintro ⟨p, p_pos, hp⟩\n    ext i\n    simp only [ProbabilityMeasure.coe_mk , Measure.coe_finset_sum, Measure.smul_toOuterMeasure,\n      OuterMeasure.coe_smul, Finset.sum_apply, Pi.smul_apply, MeasurableSet.singleton,\n      Measure.dirac_apply', Set.mem_singleton_iff, smul_eq_mul]\n    rw [Finset.sum_eq_single_of_mem i (Finset.mem_univ i)]\n    · simp only [Set.mem_singleton_iff, Set.indicator_of_mem, Pi.one_apply, mul_one]\n      exact ENNReal.toReal_ofReal (p_pos i)\n    · intro b _ bi\n      simp [bi]\n\n@[simp] lemma probabilityMeasureEquivStdSimplex_symm_coe_apply [MeasurableSingletonClass X]\n    (p : stdSimplex ℝ X) :\n    (probabilityMeasureEquivStdSimplex.symm p : Measure X) =\n       ∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i := rfl\n\n","proof":":= rfl","declId":"PFR.ForMathlib.CompactProb.94_0.O5debgo3D1CqItN","decl":"@[simp] lemma probabilityMeasureEquivStdSimplex_coe_apply [MeasurableSingletonClass X]\n    (μ : ProbabilityMeasure X) (i : X) :\n    (probabilityMeasureEquivStdSimplex μ : X → ℝ) i = (μ {i}).toReal "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\nopen Filter in\nlemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) := by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)\n\nend\n\nsection Fintype\nvariable [Fintype X]\n\n/-- The canonical bijection between the set of probability measures on a fintype and the set of\nnonnegative functions on the points adding up to one. -/\nnoncomputable def probabilityMeasureEquivStdSimplex [Fintype X] [MeasurableSingletonClass X] :\n    ProbabilityMeasure X ≃ stdSimplex ℝ X where\n  toFun := by\n    intro μ\n    refine ⟨fun i ↦ (μ {i}).toReal, by simp, ?_⟩\n    simp only\n    rw [← NNReal.coe_sum, ← ENNReal.toNNReal_sum (fun a _ha ↦ by finiteness)]\n    simp\n  invFun := by\n    intro p\n    refine ⟨∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i, ⟨?_⟩⟩\n    simp only [Measure.coe_finset_sum, Measure.smul_toOuterMeasure, OuterMeasure.coe_smul,\n      Finset.sum_apply, Pi.smul_apply, MeasurableSet.univ, Measure.dirac_apply', Set.mem_univ,\n      Set.indicator_of_mem, Pi.one_apply, smul_eq_mul, mul_one]\n    rw [← ENNReal.toReal_eq_toReal (by simp [ENNReal.sum_eq_top_iff]) ENNReal.one_ne_top,\n        ENNReal.toReal_sum (by simp)]\n    simp_rw [ENNReal.toReal_ofReal (p.2.1 _), p.2.2, ENNReal.one_toReal]\n  left_inv := by\n    intro μ\n    ext s _hs\n    conv_rhs => rw [← Measure.sum_smul_dirac (μ := (μ : Measure X))]\n    simp\n  right_inv := by\n    rintro ⟨p, p_pos, hp⟩\n    ext i\n    simp only [ProbabilityMeasure.coe_mk , Measure.coe_finset_sum, Measure.smul_toOuterMeasure,\n      OuterMeasure.coe_smul, Finset.sum_apply, Pi.smul_apply, MeasurableSet.singleton,\n      Measure.dirac_apply', Set.mem_singleton_iff, smul_eq_mul]\n    rw [Finset.sum_eq_single_of_mem i (Finset.mem_univ i)]\n    · simp only [Set.mem_singleton_iff, Set.indicator_of_mem, Pi.one_apply, mul_one]\n      exact ENNReal.toReal_ofReal (p_pos i)\n    · intro b _ bi\n      simp [bi]\n\n@[simp] lemma probabilityMeasureEquivStdSimplex_symm_coe_apply [MeasurableSingletonClass X]\n    (p : stdSimplex ℝ X) :\n    (probabilityMeasureEquivStdSimplex.symm p : Measure X) =\n       ∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i := rfl\n\n@[simp] lemma probabilityMeasureEquivStdSimplex_coe_apply [MeasurableSingletonClass X]\n    (μ : ProbabilityMeasure X) (i : X) :\n    (probabilityMeasureEquivStdSimplex μ : X → ℝ) i = (μ {i}).toReal := rfl\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\n","proof":":= probabilityMeasureEquivStdSimplex\n  continuous_toFun := by\n    apply continuous_iff_continuousAt.2 (fun μ ↦ ?_)\n    rw [ContinuousAt, tendsto_subtype_rng, tendsto_pi_nhds]\n    intro i\n    simpa using ((continuous_pmf_apply i).continuousAt (x := μ)).tendsto\n  continuous_invFun := by\n    apply continuous_iff_continuousAt.2 (fun p ↦ ?_)\n    rw [ContinuousAt, ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto]\n    intro f\n    simp only [Equiv.invFun_as_coe, probabilityMeasureEquivStdSimplex_symm_coe_apply,\n      lintegral_finset_sum_measure, lintegral_smul_measure, lintegral_dirac]\n    apply tendsto_finset_sum _ (fun i _hi ↦ ?_)\n    apply ENNReal.Tendsto.mul_const (ENNReal.tendsto_ofReal _) (by simp)\n    exact ((continuous_apply i).tendsto _).comp (continuous_subtype_val.tendsto _)","declId":"PFR.ForMathlib.CompactProb.100_0.O5debgo3D1CqItN","decl":"/-- The canonical homeomorphism between the space of probability measures on a finite space and the\nstandard simplex. -/\nnoncomputable def probabilityMeasureHomeoStdSimplex : ProbabilityMeasure X ≃ₜ stdSimplex ℝ X where\n  __ "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\nopen Filter in\nlemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) := by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)\n\nend\n\nsection Fintype\nvariable [Fintype X]\n\n/-- The canonical bijection between the set of probability measures on a fintype and the set of\nnonnegative functions on the points adding up to one. -/\nnoncomputable def probabilityMeasureEquivStdSimplex [Fintype X] [MeasurableSingletonClass X] :\n    ProbabilityMeasure X ≃ stdSimplex ℝ X where\n  toFun := by\n    intro μ\n    refine ⟨fun i ↦ (μ {i}).toReal, by simp, ?_⟩\n    simp only\n    rw [← NNReal.coe_sum, ← ENNReal.toNNReal_sum (fun a _ha ↦ by finiteness)]\n    simp\n  invFun := by\n    intro p\n    refine ⟨∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i, ⟨?_⟩⟩\n    simp only [Measure.coe_finset_sum, Measure.smul_toOuterMeasure, OuterMeasure.coe_smul,\n      Finset.sum_apply, Pi.smul_apply, MeasurableSet.univ, Measure.dirac_apply', Set.mem_univ,\n      Set.indicator_of_mem, Pi.one_apply, smul_eq_mul, mul_one]\n    rw [← ENNReal.toReal_eq_toReal (by simp [ENNReal.sum_eq_top_iff]) ENNReal.one_ne_top,\n        ENNReal.toReal_sum (by simp)]\n    simp_rw [ENNReal.toReal_ofReal (p.2.1 _), p.2.2, ENNReal.one_toReal]\n  left_inv := by\n    intro μ\n    ext s _hs\n    conv_rhs => rw [← Measure.sum_smul_dirac (μ := (μ : Measure X))]\n    simp\n  right_inv := by\n    rintro ⟨p, p_pos, hp⟩\n    ext i\n    simp only [ProbabilityMeasure.coe_mk , Measure.coe_finset_sum, Measure.smul_toOuterMeasure,\n      OuterMeasure.coe_smul, Finset.sum_apply, Pi.smul_apply, MeasurableSet.singleton,\n      Measure.dirac_apply', Set.mem_singleton_iff, smul_eq_mul]\n    rw [Finset.sum_eq_single_of_mem i (Finset.mem_univ i)]\n    · simp only [Set.mem_singleton_iff, Set.indicator_of_mem, Pi.one_apply, mul_one]\n      exact ENNReal.toReal_ofReal (p_pos i)\n    · intro b _ bi\n      simp [bi]\n\n@[simp] lemma probabilityMeasureEquivStdSimplex_symm_coe_apply [MeasurableSingletonClass X]\n    (p : stdSimplex ℝ X) :\n    (probabilityMeasureEquivStdSimplex.symm p : Measure X) =\n       ∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i := rfl\n\n@[simp] lemma probabilityMeasureEquivStdSimplex_coe_apply [MeasurableSingletonClass X]\n    (μ : ProbabilityMeasure X) (i : X) :\n    (probabilityMeasureEquivStdSimplex μ : X → ℝ) i = (μ {i}).toReal := rfl\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\n/-- The canonical homeomorphism between the space of probability measures on a finite space and the\nstandard simplex. -/\nnoncomputable def probabilityMeasureHomeoStdSimplex : ProbabilityMeasure X ≃ₜ stdSimplex ℝ X where\n  __ := probabilityMeasureEquivStdSimplex\n  continuous_toFun := by\n    apply continuous_iff_continuousAt.2 (fun μ ↦ ?_)\n    rw [ContinuousAt, tendsto_subtype_rng, tendsto_pi_nhds]\n    intro i\n    simpa using ((continuous_pmf_apply i).continuousAt (x := μ)).tendsto\n  continuous_invFun := by\n    apply continuous_iff_continuousAt.2 (fun p ↦ ?_)\n    rw [ContinuousAt, ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto]\n    intro f\n    simp only [Equiv.invFun_as_coe, probabilityMeasureEquivStdSimplex_symm_coe_apply,\n      lintegral_finset_sum_measure, lintegral_smul_measure, lintegral_dirac]\n    apply tendsto_finset_sum _ (fun i _hi ↦ ?_)\n    apply ENNReal.Tendsto.mul_const (ENNReal.tendsto_ofReal _) (by simp)\n    exact ((continuous_apply i).tendsto _).comp (continuous_subtype_val.tendsto _)\n\nend Fintype\n\nvariable [TopologicalSpace X] [OpensMeasurableSpace X] [Finite X] [DiscreteTopology X]\n  [BorelSpace X]\n\n","proof":":= by\n  cases nonempty_fintype X; exact probabilityMeasureHomeoStdSimplex.symm.compactSpace","declId":"PFR.ForMathlib.CompactProb.124_0.O5debgo3D1CqItN","decl":"/-- This is still true when `X` is a metrizable compact space, but the proof requires Riesz\nrepresentation theorem.\nTODO: remove once the general version is proved. -/\ninstance : CompactSpace (ProbabilityMeasure X) "}
{"srcUpToDecl":"import PFR.ForMathlib.FiniteMeasureComponent\n\n/-!\n# Compactness of the space of probability measures\n\nWe define the canonical bijection between the space of probability measures on a finite space `X`\nand the standard simplex, and show that it is a homeomorphism.\n\nWe deduce that the space of probability measures is compact in this situation. This is an easy case\nof a result that holds in a general compact metrizable space, but requires Riesz representation\ntheorem which we don't have currently in mathlib.\n\n-/\n\nopen MeasureTheory\nopen scoped BigOperators Topology ENNReal NNReal BoundedContinuousFunction\n\nvariable {X : Type*} [MeasurableSpace X]\n\nsection\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\nlemma continuous_pmf_apply' (i : X) :\n    Continuous fun μ : ProbabilityMeasure X ↦ (μ : Measure X).real {i} :=\n  continuous_probabilityMeasure_apply_of_isClopen (s := {i})\n    ⟨isOpen_discrete _, T1Space.t1 _⟩\n\nlemma continuous_pmf_apply (i : X) :  Continuous fun μ : ProbabilityMeasure X ↦ μ {i} := by\n  -- KK: The coercion fight here is one reason why I now prefer ℝ-valued and not ℝ≥0-valued probas.\n  convert continuous_real_toNNReal.comp (continuous_pmf_apply' i)\n  ext\n  simp only [Measure.real, Function.comp_apply, Real.coe_toNNReal', ge_iff_le,\n             ENNReal.toReal_nonneg, max_eq_left]\n  rfl\n\n-- KK: I will reuse this, so could be used in `probabilityMeasureHomeoStdSimplex`, too.\nopen Filter in\nlemma tendsto_lintegral_of_forall_of_finite [Finite X] {ι : Type*} {L : Filter ι}\n    (μs : ι → Measure X) (μ : Measure X)\n    (f : X →ᵇ ℝ≥0) (h : ∀ (x : X), Tendsto (fun i ↦ μs i {x}) L (𝓝 (μ {x}))) :\n    Tendsto (fun i ↦ ∫⁻ x, f x ∂(μs i)) L (𝓝 (∫⁻ x, f x ∂μ)) := by\n  cases nonempty_fintype X\n  simp only [lintegral_fintype]\n  refine tendsto_finset_sum Finset.univ ?_\n  exact fun x _ ↦ ENNReal.Tendsto.const_mul (h x) (Or.inr ENNReal.coe_ne_top)\n\nend\n\nsection Fintype\nvariable [Fintype X]\n\n/-- The canonical bijection between the set of probability measures on a fintype and the set of\nnonnegative functions on the points adding up to one. -/\nnoncomputable def probabilityMeasureEquivStdSimplex [Fintype X] [MeasurableSingletonClass X] :\n    ProbabilityMeasure X ≃ stdSimplex ℝ X where\n  toFun := by\n    intro μ\n    refine ⟨fun i ↦ (μ {i}).toReal, by simp, ?_⟩\n    simp only\n    rw [← NNReal.coe_sum, ← ENNReal.toNNReal_sum (fun a _ha ↦ by finiteness)]\n    simp\n  invFun := by\n    intro p\n    refine ⟨∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i, ⟨?_⟩⟩\n    simp only [Measure.coe_finset_sum, Measure.smul_toOuterMeasure, OuterMeasure.coe_smul,\n      Finset.sum_apply, Pi.smul_apply, MeasurableSet.univ, Measure.dirac_apply', Set.mem_univ,\n      Set.indicator_of_mem, Pi.one_apply, smul_eq_mul, mul_one]\n    rw [← ENNReal.toReal_eq_toReal (by simp [ENNReal.sum_eq_top_iff]) ENNReal.one_ne_top,\n        ENNReal.toReal_sum (by simp)]\n    simp_rw [ENNReal.toReal_ofReal (p.2.1 _), p.2.2, ENNReal.one_toReal]\n  left_inv := by\n    intro μ\n    ext s _hs\n    conv_rhs => rw [← Measure.sum_smul_dirac (μ := (μ : Measure X))]\n    simp\n  right_inv := by\n    rintro ⟨p, p_pos, hp⟩\n    ext i\n    simp only [ProbabilityMeasure.coe_mk , Measure.coe_finset_sum, Measure.smul_toOuterMeasure,\n      OuterMeasure.coe_smul, Finset.sum_apply, Pi.smul_apply, MeasurableSet.singleton,\n      Measure.dirac_apply', Set.mem_singleton_iff, smul_eq_mul]\n    rw [Finset.sum_eq_single_of_mem i (Finset.mem_univ i)]\n    · simp only [Set.mem_singleton_iff, Set.indicator_of_mem, Pi.one_apply, mul_one]\n      exact ENNReal.toReal_ofReal (p_pos i)\n    · intro b _ bi\n      simp [bi]\n\n@[simp] lemma probabilityMeasureEquivStdSimplex_symm_coe_apply [MeasurableSingletonClass X]\n    (p : stdSimplex ℝ X) :\n    (probabilityMeasureEquivStdSimplex.symm p : Measure X) =\n       ∑ i, ENNReal.ofReal ((p : X → ℝ) i) • Measure.dirac i := rfl\n\n@[simp] lemma probabilityMeasureEquivStdSimplex_coe_apply [MeasurableSingletonClass X]\n    (μ : ProbabilityMeasure X) (i : X) :\n    (probabilityMeasureEquivStdSimplex μ : X → ℝ) i = (μ {i}).toReal := rfl\n\nvariable [TopologicalSpace X] [DiscreteTopology X] [BorelSpace X]\n\n/-- The canonical homeomorphism between the space of probability measures on a finite space and the\nstandard simplex. -/\nnoncomputable def probabilityMeasureHomeoStdSimplex : ProbabilityMeasure X ≃ₜ stdSimplex ℝ X where\n  __ := probabilityMeasureEquivStdSimplex\n  continuous_toFun := by\n    apply continuous_iff_continuousAt.2 (fun μ ↦ ?_)\n    rw [ContinuousAt, tendsto_subtype_rng, tendsto_pi_nhds]\n    intro i\n    simpa using ((continuous_pmf_apply i).continuousAt (x := μ)).tendsto\n  continuous_invFun := by\n    apply continuous_iff_continuousAt.2 (fun p ↦ ?_)\n    rw [ContinuousAt, ProbabilityMeasure.tendsto_iff_forall_lintegral_tendsto]\n    intro f\n    simp only [Equiv.invFun_as_coe, probabilityMeasureEquivStdSimplex_symm_coe_apply,\n      lintegral_finset_sum_measure, lintegral_smul_measure, lintegral_dirac]\n    apply tendsto_finset_sum _ (fun i _hi ↦ ?_)\n    apply ENNReal.Tendsto.mul_const (ENNReal.tendsto_ofReal _) (by simp)\n    exact ((continuous_apply i).tendsto _).comp (continuous_subtype_val.tendsto _)\n\nend Fintype\n\nvariable [TopologicalSpace X] [OpensMeasurableSpace X] [Finite X] [DiscreteTopology X]\n  [BorelSpace X]\n\n/-- This is still true when `X` is a metrizable compact space, but the proof requires Riesz\nrepresentation theorem.\nTODO: remove once the general version is proved. -/\ninstance : CompactSpace (ProbabilityMeasure X) := by\n  cases nonempty_fintype X; exact probabilityMeasureHomeoStdSimplex.symm.compactSpace\n\n","proof":":= by\n  cases nonempty_fintype X\n  exact (probabilityMeasureHomeoStdSimplex (X := X)).secondCountableTopology","declId":"PFR.ForMathlib.CompactProb.130_0.O5debgo3D1CqItN","decl":"instance : SecondCountableTopology (ProbabilityMeasure X) "}
