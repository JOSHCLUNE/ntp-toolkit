{"srcUpToDecl":"import PFR.ForMathlib.Entropy.RuzsaDist\n\n/-!\n# The 100% version of entropic PFR\n\nHere we show entropic PFR in the case of doubling constant zero.\n\n## Main results\n\n* `exists_isUniform_of_rdist_eq_zero` : If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that $d[X_1;U_H] = d[X_2;U_H] = 0$.\n-/\n\nopen MeasureTheory ProbabilityTheory Real\n\nvariable {Ω : Type*} {G : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n  [AddCommGroup G] [Fintype G] [MeasurableSpace G] [MeasurableAdd₂ G] [MeasurableSub₂ G] {X : Ω → G}\n\n","proof":":= {x | IdentDistrib X (fun ω ↦ X ω + x)}\n  add_mem' := by\n    intro x y hx hy\n    let f : G → G := fun g ↦ g + x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + y)) := hy.comp $ measurable_add_const _\n    have Z := hx.trans this\n    dsimp\n    convert Z using 1\n    ext ω\n    simp only\n    abel\n  zero_mem' := by simpa using IdentDistrib.refl hX.aemeasurable\n  neg_mem' := by\n    intro x hx\n    dsimp at hx ⊢\n    let f : G → G := fun g ↦ g - x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + x)) := hx.comp $ measurable_sub_const' _\n    convert this.symm using 1\n    · ext ω\n      simp only\n      abel\n    · ext ω\n      simp only [Function.comp_apply]\n      abel","declId":"PFR.HundredPercent.18_0.p6jBdbW2tRU6XFf","decl":"/-- The symmetry group Sym of $X$: the set of all $h ∈ G$ such that $X + h$ has an identical\ndistribution to $X$. -/\ndef symmGroup (X : Ω → G) (hX : Measurable X) : AddSubgroup G where\n  carrier "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.RuzsaDist\n\n/-!\n# The 100% version of entropic PFR\n\nHere we show entropic PFR in the case of doubling constant zero.\n\n## Main results\n\n* `exists_isUniform_of_rdist_eq_zero` : If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that $d[X_1;U_H] = d[X_2;U_H] = 0$.\n-/\n\nopen MeasureTheory ProbabilityTheory Real\n\nvariable {Ω : Type*} {G : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n  [AddCommGroup G] [Fintype G] [MeasurableSpace G] [MeasurableAdd₂ G] [MeasurableSub₂ G] {X : Ω → G}\n\n/-- The symmetry group Sym of $X$: the set of all $h ∈ G$ such that $X + h$ has an identical\ndistribution to $X$. -/\ndef symmGroup (X : Ω → G) (hX : Measurable X) : AddSubgroup G where\n  carrier := {x | IdentDistrib X (fun ω ↦ X ω + x)}\n  add_mem' := by\n    intro x y hx hy\n    let f : G → G := fun g ↦ g + x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + y)) := hy.comp $ measurable_add_const _\n    have Z := hx.trans this\n    dsimp\n    convert Z using 1\n    ext ω\n    simp only\n    abel\n  zero_mem' := by simpa using IdentDistrib.refl hX.aemeasurable\n  neg_mem' := by\n    intro x hx\n    dsimp at hx ⊢\n    let f : G → G := fun g ↦ g - x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + x)) := hx.comp $ measurable_sub_const' _\n    convert this.symm using 1\n    · ext ω\n      simp only\n      abel\n    · ext ω\n      simp only [Function.comp_apply]\n      abel\n\n","proof":":= Iff.rfl","declId":"PFR.HundredPercent.46_0.p6jBdbW2tRU6XFf","decl":"@[simp] lemma mem_symmGroup (hX : Measurable X) {x : G} :\n    x ∈ symmGroup X hX ↔ IdentDistrib X (fun ω ↦ X ω + x) "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.RuzsaDist\n\n/-!\n# The 100% version of entropic PFR\n\nHere we show entropic PFR in the case of doubling constant zero.\n\n## Main results\n\n* `exists_isUniform_of_rdist_eq_zero` : If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that $d[X_1;U_H] = d[X_2;U_H] = 0$.\n-/\n\nopen MeasureTheory ProbabilityTheory Real\n\nvariable {Ω : Type*} {G : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n  [AddCommGroup G] [Fintype G] [MeasurableSpace G] [MeasurableAdd₂ G] [MeasurableSub₂ G] {X : Ω → G}\n\n/-- The symmetry group Sym of $X$: the set of all $h ∈ G$ such that $X + h$ has an identical\ndistribution to $X$. -/\ndef symmGroup (X : Ω → G) (hX : Measurable X) : AddSubgroup G where\n  carrier := {x | IdentDistrib X (fun ω ↦ X ω + x)}\n  add_mem' := by\n    intro x y hx hy\n    let f : G → G := fun g ↦ g + x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + y)) := hy.comp $ measurable_add_const _\n    have Z := hx.trans this\n    dsimp\n    convert Z using 1\n    ext ω\n    simp only\n    abel\n  zero_mem' := by simpa using IdentDistrib.refl hX.aemeasurable\n  neg_mem' := by\n    intro x hx\n    dsimp at hx ⊢\n    let f : G → G := fun g ↦ g - x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + x)) := hx.comp $ measurable_sub_const' _\n    convert this.symm using 1\n    · ext ω\n      simp only\n      abel\n    · ext ω\n      simp only [Function.comp_apply]\n      abel\n\n@[simp] lemma mem_symmGroup (hX : Measurable X) {x : G} :\n    x ∈ symmGroup X hX ↔ IdentDistrib X (fun ω ↦ X ω + x) := Iff.rfl\n\n","proof":":= by\n  ext x\n  have A : Measurable (fun a ↦ a + x) := measurable_add_const _\n  exact ⟨fun H ↦ h.symm.trans (H.trans (h.comp A)), fun H ↦ h.trans (H.trans (h.symm.comp A))⟩","declId":"PFR.HundredPercent.49_0.p6jBdbW2tRU6XFf","decl":"lemma ProbabilityTheory.IdentDistrib.symmGroup_eq {Ω' : Type*} [MeasureSpace Ω'] {X' : Ω' → G}\n    (hX : Measurable X) (hX' : Measurable X') (h : IdentDistrib X X') :\n    symmGroup X hX = symmGroup X' hX' "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.RuzsaDist\n\n/-!\n# The 100% version of entropic PFR\n\nHere we show entropic PFR in the case of doubling constant zero.\n\n## Main results\n\n* `exists_isUniform_of_rdist_eq_zero` : If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that $d[X_1;U_H] = d[X_2;U_H] = 0$.\n-/\n\nopen MeasureTheory ProbabilityTheory Real\n\nvariable {Ω : Type*} {G : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n  [AddCommGroup G] [Fintype G] [MeasurableSpace G] [MeasurableAdd₂ G] [MeasurableSub₂ G] {X : Ω → G}\n\n/-- The symmetry group Sym of $X$: the set of all $h ∈ G$ such that $X + h$ has an identical\ndistribution to $X$. -/\ndef symmGroup (X : Ω → G) (hX : Measurable X) : AddSubgroup G where\n  carrier := {x | IdentDistrib X (fun ω ↦ X ω + x)}\n  add_mem' := by\n    intro x y hx hy\n    let f : G → G := fun g ↦ g + x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + y)) := hy.comp $ measurable_add_const _\n    have Z := hx.trans this\n    dsimp\n    convert Z using 1\n    ext ω\n    simp only\n    abel\n  zero_mem' := by simpa using IdentDistrib.refl hX.aemeasurable\n  neg_mem' := by\n    intro x hx\n    dsimp at hx ⊢\n    let f : G → G := fun g ↦ g - x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + x)) := hx.comp $ measurable_sub_const' _\n    convert this.symm using 1\n    · ext ω\n      simp only\n      abel\n    · ext ω\n      simp only [Function.comp_apply]\n      abel\n\n@[simp] lemma mem_symmGroup (hX : Measurable X) {x : G} :\n    x ∈ symmGroup X hX ↔ IdentDistrib X (fun ω ↦ X ω + x) := Iff.rfl\n\nlemma ProbabilityTheory.IdentDistrib.symmGroup_eq {Ω' : Type*} [MeasureSpace Ω'] {X' : Ω' → G}\n    (hX : Measurable X) (hX' : Measurable X') (h : IdentDistrib X X') :\n    symmGroup X hX = symmGroup X' hX' := by\n  ext x\n  have A : Measurable (fun a ↦ a + x) := measurable_add_const _\n  exact ⟨fun H ↦ h.symm.trans (H.trans (h.comp A)), fun H ↦ h.trans (H.trans (h.symm.comp A))⟩\n\nvariable [MeasurableSingletonClass G]\n\n","proof":":= by\n  /- Consider two independent copies `X'` and `Y'` of `X`. The assumption on the Rusza distance\n  ensures that `H[X' - Y' | Y'] = H[X' - Y']`, i.e., `X' - Y'` and `Y'` are independent. Therefore,\n  the distribution of `X' - c` is independent of `c` for `c` in the support of `Y'`.\n  In particular, `X' - x` and `X' - y` have the same distribution, which is equivalent to the\n  claim of the lemma. -/\n  rcases ProbabilityTheory.independent_copies_two hX hX with\n    ⟨Ω', mΩ', X', Y', hP, hX', hY', hindep, hidX, hidY⟩\n  rw [hidX.symm.symmGroup_eq hX hX']\n  have A : H[X' - Y' | Y'] = H[X' - Y'] := calc\n    H[X' - Y' | Y'] = H[X' | Y'] := condEntropy_sub_right hX' hY'\n    _ = H[X'] := hindep.condEntropy_eq_entropy hX' hY'\n    _ = H[X' - Y'] := by\n      have : d[X' # Y'] = 0 := by rwa [hidX.rdist_eq hidY]\n      rw [hindep.rdist_eq hX' hY', ← (hidX.trans hidY.symm).entropy_eq] at this\n      linarith\n  have I : IndepFun (X' - Y') Y' := by\n    refine (mutualInfo_eq_zero (hX'.sub' hY') hY').1 ?_\n    rw [mutualInfo_eq_entropy_sub_condEntropy (hX'.sub' hY') hY', A, sub_self]\n  have M : ∀ c, ℙ (Y' ⁻¹' {c}) ≠ 0 → IdentDistrib (fun ω ↦ X' ω - c) (X' - Y') := by\n    intro c hc\n    let F := fun ω ↦ X' ω - c\n    refine ⟨(hX'.sub_const _).aemeasurable, (hX'.sub' hY').aemeasurable, ?_⟩\n    ext s hs\n    rw [Measure.map_apply (hX'.sub_const _) hs, Measure.map_apply (hX'.sub' hY') hs]\n    have : ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by calc\n      ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ (F ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        have hFY' : IndepFun F Y' := by\n          have : Measurable (fun z ↦ z - c) := measurable_sub_const' c\n          apply hindep.comp this measurable_id\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 hFY' _ _ hs $ measurableSet_discrete _]\n      _ = ℙ ((X' - Y') ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        congr 1; ext z; simp (config := {contextual := true})\n      _ = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 I _ _ hs $ measurableSet_discrete _]\n    rwa [ENNReal.mul_eq_mul_right hc (measure_ne_top ℙ _)] at this\n  have J : IdentDistrib (fun ω ↦ X' ω - x) (fun ω ↦ X' ω - y) := by\n    have Px : ℙ (Y' ⁻¹' {x}) ≠ 0 := by\n      convert hx; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    have Py : ℙ (Y' ⁻¹' {y}) ≠ 0 := by\n      convert hy; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    exact (M x Px).trans (M y Py).symm\n  have : IdentDistrib X' (fun ω ↦ X' ω + (x - y)) := by\n    have : Measurable (fun c ↦ c + x) := measurable_add_const x\n    convert J.comp this using 1\n    · ext ω; simp\n    · ext ω; simp; abel\n  exact this","declId":"PFR.HundredPercent.58_0.p6jBdbW2tRU6XFf","decl":"/-- If $d[X ;X]=0$, and $x,y \\in G$ are such that $P[X=x], P[X=y]>0$,\nthen $x-y \\in \\mathrm{Sym}[X]$. -/\nlemma sub_mem_symmGroup (hX : Measurable X) (hdist : d[X # X] = 0)\n    {x y : G} (hx : ℙ (X⁻¹' {x}) ≠ 0) (hy : ℙ (X⁻¹' {y}) ≠ 0) : x - y ∈ symmGroup X hX "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.RuzsaDist\n\n/-!\n# The 100% version of entropic PFR\n\nHere we show entropic PFR in the case of doubling constant zero.\n\n## Main results\n\n* `exists_isUniform_of_rdist_eq_zero` : If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that $d[X_1;U_H] = d[X_2;U_H] = 0$.\n-/\n\nopen MeasureTheory ProbabilityTheory Real\n\nvariable {Ω : Type*} {G : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n  [AddCommGroup G] [Fintype G] [MeasurableSpace G] [MeasurableAdd₂ G] [MeasurableSub₂ G] {X : Ω → G}\n\n/-- The symmetry group Sym of $X$: the set of all $h ∈ G$ such that $X + h$ has an identical\ndistribution to $X$. -/\ndef symmGroup (X : Ω → G) (hX : Measurable X) : AddSubgroup G where\n  carrier := {x | IdentDistrib X (fun ω ↦ X ω + x)}\n  add_mem' := by\n    intro x y hx hy\n    let f : G → G := fun g ↦ g + x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + y)) := hy.comp $ measurable_add_const _\n    have Z := hx.trans this\n    dsimp\n    convert Z using 1\n    ext ω\n    simp only\n    abel\n  zero_mem' := by simpa using IdentDistrib.refl hX.aemeasurable\n  neg_mem' := by\n    intro x hx\n    dsimp at hx ⊢\n    let f : G → G := fun g ↦ g - x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + x)) := hx.comp $ measurable_sub_const' _\n    convert this.symm using 1\n    · ext ω\n      simp only\n      abel\n    · ext ω\n      simp only [Function.comp_apply]\n      abel\n\n@[simp] lemma mem_symmGroup (hX : Measurable X) {x : G} :\n    x ∈ symmGroup X hX ↔ IdentDistrib X (fun ω ↦ X ω + x) := Iff.rfl\n\nlemma ProbabilityTheory.IdentDistrib.symmGroup_eq {Ω' : Type*} [MeasureSpace Ω'] {X' : Ω' → G}\n    (hX : Measurable X) (hX' : Measurable X') (h : IdentDistrib X X') :\n    symmGroup X hX = symmGroup X' hX' := by\n  ext x\n  have A : Measurable (fun a ↦ a + x) := measurable_add_const _\n  exact ⟨fun H ↦ h.symm.trans (H.trans (h.comp A)), fun H ↦ h.trans (H.trans (h.symm.comp A))⟩\n\nvariable [MeasurableSingletonClass G]\n\n/-- If $d[X ;X]=0$, and $x,y \\in G$ are such that $P[X=x], P[X=y]>0$,\nthen $x-y \\in \\mathrm{Sym}[X]$. -/\nlemma sub_mem_symmGroup (hX : Measurable X) (hdist : d[X # X] = 0)\n    {x y : G} (hx : ℙ (X⁻¹' {x}) ≠ 0) (hy : ℙ (X⁻¹' {y}) ≠ 0) : x - y ∈ symmGroup X hX := by\n  /- Consider two independent copies `X'` and `Y'` of `X`. The assumption on the Rusza distance\n  ensures that `H[X' - Y' | Y'] = H[X' - Y']`, i.e., `X' - Y'` and `Y'` are independent. Therefore,\n  the distribution of `X' - c` is independent of `c` for `c` in the support of `Y'`.\n  In particular, `X' - x` and `X' - y` have the same distribution, which is equivalent to the\n  claim of the lemma. -/\n  rcases ProbabilityTheory.independent_copies_two hX hX with\n    ⟨Ω', mΩ', X', Y', hP, hX', hY', hindep, hidX, hidY⟩\n  rw [hidX.symm.symmGroup_eq hX hX']\n  have A : H[X' - Y' | Y'] = H[X' - Y'] := calc\n    H[X' - Y' | Y'] = H[X' | Y'] := condEntropy_sub_right hX' hY'\n    _ = H[X'] := hindep.condEntropy_eq_entropy hX' hY'\n    _ = H[X' - Y'] := by\n      have : d[X' # Y'] = 0 := by rwa [hidX.rdist_eq hidY]\n      rw [hindep.rdist_eq hX' hY', ← (hidX.trans hidY.symm).entropy_eq] at this\n      linarith\n  have I : IndepFun (X' - Y') Y' := by\n    refine (mutualInfo_eq_zero (hX'.sub' hY') hY').1 ?_\n    rw [mutualInfo_eq_entropy_sub_condEntropy (hX'.sub' hY') hY', A, sub_self]\n  have M : ∀ c, ℙ (Y' ⁻¹' {c}) ≠ 0 → IdentDistrib (fun ω ↦ X' ω - c) (X' - Y') := by\n    intro c hc\n    let F := fun ω ↦ X' ω - c\n    refine ⟨(hX'.sub_const _).aemeasurable, (hX'.sub' hY').aemeasurable, ?_⟩\n    ext s hs\n    rw [Measure.map_apply (hX'.sub_const _) hs, Measure.map_apply (hX'.sub' hY') hs]\n    have : ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by calc\n      ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ (F ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        have hFY' : IndepFun F Y' := by\n          have : Measurable (fun z ↦ z - c) := measurable_sub_const' c\n          apply hindep.comp this measurable_id\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 hFY' _ _ hs $ measurableSet_discrete _]\n      _ = ℙ ((X' - Y') ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        congr 1; ext z; simp (config := {contextual := true})\n      _ = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 I _ _ hs $ measurableSet_discrete _]\n    rwa [ENNReal.mul_eq_mul_right hc (measure_ne_top ℙ _)] at this\n  have J : IdentDistrib (fun ω ↦ X' ω - x) (fun ω ↦ X' ω - y) := by\n    have Px : ℙ (Y' ⁻¹' {x}) ≠ 0 := by\n      convert hx; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    have Py : ℙ (Y' ⁻¹' {y}) ≠ 0 := by\n      convert hy; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    exact (M x Px).trans (M y Py).symm\n  have : IdentDistrib X' (fun ω ↦ X' ω + (x - y)) := by\n    have : Measurable (fun c ↦ c + x) := measurable_add_const x\n    convert J.comp this using 1\n    · ext ω; simp\n    · ext ω; simp; abel\n  exact this\n\n","proof":":= by\n    have B c z : (fun ω ↦ X ω - c) ⁻¹' {z} = X ⁻¹' {c + z} := by\n      ext w; simp [sub_eq_iff_eq_add']\n    have A : ∀ (z : G), z ∈ symmGroup X hX →\n        ℙ ((fun ω ↦ X ω - x₀) ⁻¹' {z}) = ℙ ((fun ω ↦ X ω - x₀) ⁻¹' {0}) := by\n      intro z hz\n      have : X ⁻¹' {x₀ + z} = (fun ω ↦ X ω - z) ⁻¹' {x₀} := by simp [B, add_comm]\n      simp_rw [B, add_zero, this]\n      have Z := (mem_symmGroup hX).1 (AddSubgroup.neg_mem (symmGroup X hX) hz)\n      simp [← sub_eq_add_neg] at Z\n      exact Z.symm.measure_mem_eq $ measurableSet_discrete _\n    intro x y hx hy\n    rw [A x hx, A y hy]\n  measure_preimage_compl := by\n    apply (measure_preimage_eq_zero_iff_of_countable (Set.to_countable _)).2\n    intro x hx\n    contrapose! hx\n    have B : (fun ω ↦ X ω - x₀) ⁻¹' {x} = X ⁻¹' {x₀ + x} := by\n      ext w; simp [sub_eq_iff_eq_add']\n    rw [B] at hx\n    simpa using sub_mem_symmGroup hX hdist hx hx₀","declId":"PFR.HundredPercent.110_0.p6jBdbW2tRU6XFf","decl":"/-- If `d[X # X] = 0`, then `X - x₀` is the uniform distribution on the subgroup of `G`\nstabilizing the distribution of `X`, for any `x₀` of positive probability. -/\nlemma isUniform_sub_const_of_rdist_eq_zero (hX : Measurable X) (hdist : d[X # X] = 0) {x₀ : G}\n    (hx₀ : ℙ (X⁻¹' {x₀}) ≠ 0) : IsUniform (symmGroup X hX) (fun ω ↦ X ω - x₀) where\n  eq_of_mem "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.RuzsaDist\n\n/-!\n# The 100% version of entropic PFR\n\nHere we show entropic PFR in the case of doubling constant zero.\n\n## Main results\n\n* `exists_isUniform_of_rdist_eq_zero` : If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that $d[X_1;U_H] = d[X_2;U_H] = 0$.\n-/\n\nopen MeasureTheory ProbabilityTheory Real\n\nvariable {Ω : Type*} {G : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n  [AddCommGroup G] [Fintype G] [MeasurableSpace G] [MeasurableAdd₂ G] [MeasurableSub₂ G] {X : Ω → G}\n\n/-- The symmetry group Sym of $X$: the set of all $h ∈ G$ such that $X + h$ has an identical\ndistribution to $X$. -/\ndef symmGroup (X : Ω → G) (hX : Measurable X) : AddSubgroup G where\n  carrier := {x | IdentDistrib X (fun ω ↦ X ω + x)}\n  add_mem' := by\n    intro x y hx hy\n    let f : G → G := fun g ↦ g + x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + y)) := hy.comp $ measurable_add_const _\n    have Z := hx.trans this\n    dsimp\n    convert Z using 1\n    ext ω\n    simp only\n    abel\n  zero_mem' := by simpa using IdentDistrib.refl hX.aemeasurable\n  neg_mem' := by\n    intro x hx\n    dsimp at hx ⊢\n    let f : G → G := fun g ↦ g - x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + x)) := hx.comp $ measurable_sub_const' _\n    convert this.symm using 1\n    · ext ω\n      simp only\n      abel\n    · ext ω\n      simp only [Function.comp_apply]\n      abel\n\n@[simp] lemma mem_symmGroup (hX : Measurable X) {x : G} :\n    x ∈ symmGroup X hX ↔ IdentDistrib X (fun ω ↦ X ω + x) := Iff.rfl\n\nlemma ProbabilityTheory.IdentDistrib.symmGroup_eq {Ω' : Type*} [MeasureSpace Ω'] {X' : Ω' → G}\n    (hX : Measurable X) (hX' : Measurable X') (h : IdentDistrib X X') :\n    symmGroup X hX = symmGroup X' hX' := by\n  ext x\n  have A : Measurable (fun a ↦ a + x) := measurable_add_const _\n  exact ⟨fun H ↦ h.symm.trans (H.trans (h.comp A)), fun H ↦ h.trans (H.trans (h.symm.comp A))⟩\n\nvariable [MeasurableSingletonClass G]\n\n/-- If $d[X ;X]=0$, and $x,y \\in G$ are such that $P[X=x], P[X=y]>0$,\nthen $x-y \\in \\mathrm{Sym}[X]$. -/\nlemma sub_mem_symmGroup (hX : Measurable X) (hdist : d[X # X] = 0)\n    {x y : G} (hx : ℙ (X⁻¹' {x}) ≠ 0) (hy : ℙ (X⁻¹' {y}) ≠ 0) : x - y ∈ symmGroup X hX := by\n  /- Consider two independent copies `X'` and `Y'` of `X`. The assumption on the Rusza distance\n  ensures that `H[X' - Y' | Y'] = H[X' - Y']`, i.e., `X' - Y'` and `Y'` are independent. Therefore,\n  the distribution of `X' - c` is independent of `c` for `c` in the support of `Y'`.\n  In particular, `X' - x` and `X' - y` have the same distribution, which is equivalent to the\n  claim of the lemma. -/\n  rcases ProbabilityTheory.independent_copies_two hX hX with\n    ⟨Ω', mΩ', X', Y', hP, hX', hY', hindep, hidX, hidY⟩\n  rw [hidX.symm.symmGroup_eq hX hX']\n  have A : H[X' - Y' | Y'] = H[X' - Y'] := calc\n    H[X' - Y' | Y'] = H[X' | Y'] := condEntropy_sub_right hX' hY'\n    _ = H[X'] := hindep.condEntropy_eq_entropy hX' hY'\n    _ = H[X' - Y'] := by\n      have : d[X' # Y'] = 0 := by rwa [hidX.rdist_eq hidY]\n      rw [hindep.rdist_eq hX' hY', ← (hidX.trans hidY.symm).entropy_eq] at this\n      linarith\n  have I : IndepFun (X' - Y') Y' := by\n    refine (mutualInfo_eq_zero (hX'.sub' hY') hY').1 ?_\n    rw [mutualInfo_eq_entropy_sub_condEntropy (hX'.sub' hY') hY', A, sub_self]\n  have M : ∀ c, ℙ (Y' ⁻¹' {c}) ≠ 0 → IdentDistrib (fun ω ↦ X' ω - c) (X' - Y') := by\n    intro c hc\n    let F := fun ω ↦ X' ω - c\n    refine ⟨(hX'.sub_const _).aemeasurable, (hX'.sub' hY').aemeasurable, ?_⟩\n    ext s hs\n    rw [Measure.map_apply (hX'.sub_const _) hs, Measure.map_apply (hX'.sub' hY') hs]\n    have : ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by calc\n      ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ (F ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        have hFY' : IndepFun F Y' := by\n          have : Measurable (fun z ↦ z - c) := measurable_sub_const' c\n          apply hindep.comp this measurable_id\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 hFY' _ _ hs $ measurableSet_discrete _]\n      _ = ℙ ((X' - Y') ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        congr 1; ext z; simp (config := {contextual := true})\n      _ = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 I _ _ hs $ measurableSet_discrete _]\n    rwa [ENNReal.mul_eq_mul_right hc (measure_ne_top ℙ _)] at this\n  have J : IdentDistrib (fun ω ↦ X' ω - x) (fun ω ↦ X' ω - y) := by\n    have Px : ℙ (Y' ⁻¹' {x}) ≠ 0 := by\n      convert hx; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    have Py : ℙ (Y' ⁻¹' {y}) ≠ 0 := by\n      convert hy; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    exact (M x Px).trans (M y Py).symm\n  have : IdentDistrib X' (fun ω ↦ X' ω + (x - y)) := by\n    have : Measurable (fun c ↦ c + x) := measurable_add_const x\n    convert J.comp this using 1\n    · ext ω; simp\n    · ext ω; simp; abel\n  exact this\n\n/-- If `d[X # X] = 0`, then `X - x₀` is the uniform distribution on the subgroup of `G`\nstabilizing the distribution of `X`, for any `x₀` of positive probability. -/\nlemma isUniform_sub_const_of_rdist_eq_zero (hX : Measurable X) (hdist : d[X # X] = 0) {x₀ : G}\n    (hx₀ : ℙ (X⁻¹' {x₀}) ≠ 0) : IsUniform (symmGroup X hX) (fun ω ↦ X ω - x₀) where\n  eq_of_mem := by\n    have B c z : (fun ω ↦ X ω - c) ⁻¹' {z} = X ⁻¹' {c + z} := by\n      ext w; simp [sub_eq_iff_eq_add']\n    have A : ∀ (z : G), z ∈ symmGroup X hX →\n        ℙ ((fun ω ↦ X ω - x₀) ⁻¹' {z}) = ℙ ((fun ω ↦ X ω - x₀) ⁻¹' {0}) := by\n      intro z hz\n      have : X ⁻¹' {x₀ + z} = (fun ω ↦ X ω - z) ⁻¹' {x₀} := by simp [B, add_comm]\n      simp_rw [B, add_zero, this]\n      have Z := (mem_symmGroup hX).1 (AddSubgroup.neg_mem (symmGroup X hX) hz)\n      simp [← sub_eq_add_neg] at Z\n      exact Z.symm.measure_mem_eq $ measurableSet_discrete _\n    intro x y hx hy\n    rw [A x hx, A y hy]\n  measure_preimage_compl := by\n    apply (measure_preimage_eq_zero_iff_of_countable (Set.to_countable _)).2\n    intro x hx\n    contrapose! hx\n    have B : (fun ω ↦ X ω - x₀) ⁻¹' {x} = X ⁻¹' {x₀ + x} := by\n      ext w; simp [sub_eq_iff_eq_add']\n    rw [B] at hx\n    simpa using sub_mem_symmGroup hX hdist hx hx₀\n\n","proof":":= by\n  -- use for `U` a translate of `X` to make sure that `0` is in its support.\n  obtain ⟨x₀, h₀⟩ : ∃ x₀, ℙ (X⁻¹' {x₀}) ≠ 0 := by\n    by_contra! h\n    have A a : (ℙ : Measure Ω).map X {a} = 0 := by\n      rw [Measure.map_apply hX $ measurableSet_discrete _]\n      exact h _\n    have B : (ℙ : Measure Ω).map X = 0 := by\n      rw [← Measure.sum_smul_dirac (μ := (ℙ : Measure Ω).map X)]\n      simp [A]\n    have : IsProbabilityMeasure ((ℙ : Measure Ω).map X) :=\n      isProbabilityMeasure_map hX.aemeasurable\n    exact IsProbabilityMeasure.ne_zero _ B\n  refine ⟨symmGroup X hX, fun ω ↦ X ω - x₀, hX.sub_const _,\n    isUniform_sub_const_of_rdist_eq_zero hX hdist h₀, ?_⟩\n  simp_rw [sub_eq_add_neg]\n  suffices : d[X # X + fun _ ↦ -x₀] = 0\n  . convert this\n  rw [rdist_add_const hX hX]\n  exact hdist","declId":"PFR.HundredPercent.136_0.p6jBdbW2tRU6XFf","decl":"/-- If $d[X ;X]=0$, then there exists a subgroup $H \\leq G$ such that $d[X ;U_H] = 0$. -/\ntheorem exists_isUniform_of_rdist_self_eq_zero (hX : Measurable X) (hdist : d[X # X] = 0) :\n    ∃ H : AddSubgroup G, ∃ U : Ω → G, Measurable U ∧ IsUniform H U ∧ d[X # U] = 0 "}
{"srcUpToDecl":"import PFR.ForMathlib.Entropy.RuzsaDist\n\n/-!\n# The 100% version of entropic PFR\n\nHere we show entropic PFR in the case of doubling constant zero.\n\n## Main results\n\n* `exists_isUniform_of_rdist_eq_zero` : If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that $d[X_1;U_H] = d[X_2;U_H] = 0$.\n-/\n\nopen MeasureTheory ProbabilityTheory Real\n\nvariable {Ω : Type*} {G : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n  [AddCommGroup G] [Fintype G] [MeasurableSpace G] [MeasurableAdd₂ G] [MeasurableSub₂ G] {X : Ω → G}\n\n/-- The symmetry group Sym of $X$: the set of all $h ∈ G$ such that $X + h$ has an identical\ndistribution to $X$. -/\ndef symmGroup (X : Ω → G) (hX : Measurable X) : AddSubgroup G where\n  carrier := {x | IdentDistrib X (fun ω ↦ X ω + x)}\n  add_mem' := by\n    intro x y hx hy\n    let f : G → G := fun g ↦ g + x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + y)) := hy.comp $ measurable_add_const _\n    have Z := hx.trans this\n    dsimp\n    convert Z using 1\n    ext ω\n    simp only\n    abel\n  zero_mem' := by simpa using IdentDistrib.refl hX.aemeasurable\n  neg_mem' := by\n    intro x hx\n    dsimp at hx ⊢\n    let f : G → G := fun g ↦ g - x\n    have : IdentDistrib (f ∘ X) (fun ω ↦ f (X ω + x)) := hx.comp $ measurable_sub_const' _\n    convert this.symm using 1\n    · ext ω\n      simp only\n      abel\n    · ext ω\n      simp only [Function.comp_apply]\n      abel\n\n@[simp] lemma mem_symmGroup (hX : Measurable X) {x : G} :\n    x ∈ symmGroup X hX ↔ IdentDistrib X (fun ω ↦ X ω + x) := Iff.rfl\n\nlemma ProbabilityTheory.IdentDistrib.symmGroup_eq {Ω' : Type*} [MeasureSpace Ω'] {X' : Ω' → G}\n    (hX : Measurable X) (hX' : Measurable X') (h : IdentDistrib X X') :\n    symmGroup X hX = symmGroup X' hX' := by\n  ext x\n  have A : Measurable (fun a ↦ a + x) := measurable_add_const _\n  exact ⟨fun H ↦ h.symm.trans (H.trans (h.comp A)), fun H ↦ h.trans (H.trans (h.symm.comp A))⟩\n\nvariable [MeasurableSingletonClass G]\n\n/-- If $d[X ;X]=0$, and $x,y \\in G$ are such that $P[X=x], P[X=y]>0$,\nthen $x-y \\in \\mathrm{Sym}[X]$. -/\nlemma sub_mem_symmGroup (hX : Measurable X) (hdist : d[X # X] = 0)\n    {x y : G} (hx : ℙ (X⁻¹' {x}) ≠ 0) (hy : ℙ (X⁻¹' {y}) ≠ 0) : x - y ∈ symmGroup X hX := by\n  /- Consider two independent copies `X'` and `Y'` of `X`. The assumption on the Rusza distance\n  ensures that `H[X' - Y' | Y'] = H[X' - Y']`, i.e., `X' - Y'` and `Y'` are independent. Therefore,\n  the distribution of `X' - c` is independent of `c` for `c` in the support of `Y'`.\n  In particular, `X' - x` and `X' - y` have the same distribution, which is equivalent to the\n  claim of the lemma. -/\n  rcases ProbabilityTheory.independent_copies_two hX hX with\n    ⟨Ω', mΩ', X', Y', hP, hX', hY', hindep, hidX, hidY⟩\n  rw [hidX.symm.symmGroup_eq hX hX']\n  have A : H[X' - Y' | Y'] = H[X' - Y'] := calc\n    H[X' - Y' | Y'] = H[X' | Y'] := condEntropy_sub_right hX' hY'\n    _ = H[X'] := hindep.condEntropy_eq_entropy hX' hY'\n    _ = H[X' - Y'] := by\n      have : d[X' # Y'] = 0 := by rwa [hidX.rdist_eq hidY]\n      rw [hindep.rdist_eq hX' hY', ← (hidX.trans hidY.symm).entropy_eq] at this\n      linarith\n  have I : IndepFun (X' - Y') Y' := by\n    refine (mutualInfo_eq_zero (hX'.sub' hY') hY').1 ?_\n    rw [mutualInfo_eq_entropy_sub_condEntropy (hX'.sub' hY') hY', A, sub_self]\n  have M : ∀ c, ℙ (Y' ⁻¹' {c}) ≠ 0 → IdentDistrib (fun ω ↦ X' ω - c) (X' - Y') := by\n    intro c hc\n    let F := fun ω ↦ X' ω - c\n    refine ⟨(hX'.sub_const _).aemeasurable, (hX'.sub' hY').aemeasurable, ?_⟩\n    ext s hs\n    rw [Measure.map_apply (hX'.sub_const _) hs, Measure.map_apply (hX'.sub' hY') hs]\n    have : ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by calc\n      ℙ (F ⁻¹' s) * ℙ (Y' ⁻¹' {c}) = ℙ (F ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        have hFY' : IndepFun F Y' := by\n          have : Measurable (fun z ↦ z - c) := measurable_sub_const' c\n          apply hindep.comp this measurable_id\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 hFY' _ _ hs $ measurableSet_discrete _]\n      _ = ℙ ((X' - Y') ⁻¹' s ∩ Y' ⁻¹' {c}) := by\n        congr 1; ext z; simp (config := {contextual := true})\n      _ = ℙ ((X' - Y') ⁻¹' s) * ℙ (Y' ⁻¹' {c}) := by\n        rw [indepFun_iff_measure_inter_preimage_eq_mul.1 I _ _ hs $ measurableSet_discrete _]\n    rwa [ENNReal.mul_eq_mul_right hc (measure_ne_top ℙ _)] at this\n  have J : IdentDistrib (fun ω ↦ X' ω - x) (fun ω ↦ X' ω - y) := by\n    have Px : ℙ (Y' ⁻¹' {x}) ≠ 0 := by\n      convert hx; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    have Py : ℙ (Y' ⁻¹' {y}) ≠ 0 := by\n      convert hy; exact hidY.measure_mem_eq $ measurableSet_discrete _\n    exact (M x Px).trans (M y Py).symm\n  have : IdentDistrib X' (fun ω ↦ X' ω + (x - y)) := by\n    have : Measurable (fun c ↦ c + x) := measurable_add_const x\n    convert J.comp this using 1\n    · ext ω; simp\n    · ext ω; simp; abel\n  exact this\n\n/-- If `d[X # X] = 0`, then `X - x₀` is the uniform distribution on the subgroup of `G`\nstabilizing the distribution of `X`, for any `x₀` of positive probability. -/\nlemma isUniform_sub_const_of_rdist_eq_zero (hX : Measurable X) (hdist : d[X # X] = 0) {x₀ : G}\n    (hx₀ : ℙ (X⁻¹' {x₀}) ≠ 0) : IsUniform (symmGroup X hX) (fun ω ↦ X ω - x₀) where\n  eq_of_mem := by\n    have B c z : (fun ω ↦ X ω - c) ⁻¹' {z} = X ⁻¹' {c + z} := by\n      ext w; simp [sub_eq_iff_eq_add']\n    have A : ∀ (z : G), z ∈ symmGroup X hX →\n        ℙ ((fun ω ↦ X ω - x₀) ⁻¹' {z}) = ℙ ((fun ω ↦ X ω - x₀) ⁻¹' {0}) := by\n      intro z hz\n      have : X ⁻¹' {x₀ + z} = (fun ω ↦ X ω - z) ⁻¹' {x₀} := by simp [B, add_comm]\n      simp_rw [B, add_zero, this]\n      have Z := (mem_symmGroup hX).1 (AddSubgroup.neg_mem (symmGroup X hX) hz)\n      simp [← sub_eq_add_neg] at Z\n      exact Z.symm.measure_mem_eq $ measurableSet_discrete _\n    intro x y hx hy\n    rw [A x hx, A y hy]\n  measure_preimage_compl := by\n    apply (measure_preimage_eq_zero_iff_of_countable (Set.to_countable _)).2\n    intro x hx\n    contrapose! hx\n    have B : (fun ω ↦ X ω - x₀) ⁻¹' {x} = X ⁻¹' {x₀ + x} := by\n      ext w; simp [sub_eq_iff_eq_add']\n    rw [B] at hx\n    simpa using sub_mem_symmGroup hX hdist hx hx₀\n\n/-- If $d[X ;X]=0$, then there exists a subgroup $H \\leq G$ such that $d[X ;U_H] = 0$. -/\ntheorem exists_isUniform_of_rdist_self_eq_zero (hX : Measurable X) (hdist : d[X # X] = 0) :\n    ∃ H : AddSubgroup G, ∃ U : Ω → G, Measurable U ∧ IsUniform H U ∧ d[X # U] = 0 := by\n  -- use for `U` a translate of `X` to make sure that `0` is in its support.\n  obtain ⟨x₀, h₀⟩ : ∃ x₀, ℙ (X⁻¹' {x₀}) ≠ 0 := by\n    by_contra! h\n    have A a : (ℙ : Measure Ω).map X {a} = 0 := by\n      rw [Measure.map_apply hX $ measurableSet_discrete _]\n      exact h _\n    have B : (ℙ : Measure Ω).map X = 0 := by\n      rw [← Measure.sum_smul_dirac (μ := (ℙ : Measure Ω).map X)]\n      simp [A]\n    have : IsProbabilityMeasure ((ℙ : Measure Ω).map X) :=\n      isProbabilityMeasure_map hX.aemeasurable\n    exact IsProbabilityMeasure.ne_zero _ B\n  refine ⟨symmGroup X hX, fun ω ↦ X ω - x₀, hX.sub_const _,\n    isUniform_sub_const_of_rdist_eq_zero hX hdist h₀, ?_⟩\n  simp_rw [sub_eq_add_neg]\n  suffices : d[X # X + fun _ ↦ -x₀] = 0\n  . convert this\n  rw [rdist_add_const hX hX]\n  exact hdist\n\n","proof":":= by\n  have h' : d[X # X] = 0 := by\n    apply le_antisymm _ (rdist_nonneg hX hX)\n    calc\n      d[X # X] ≤ d[X # X'] + d[X' # X] := rdist_triangle hX hX' hX\n      _ = 0 := by rw [hdist, rdist_symm, hdist, zero_add]\n  rcases exists_isUniform_of_rdist_self_eq_zero hX h' with ⟨H, U, hmeas, hunif, hd⟩\n  refine ⟨H, U, hmeas, hunif, hd, ?_⟩\n  apply le_antisymm _ (rdist_nonneg hX' hmeas)\n  calc\n    d[X' # U] ≤ d[X' # X] + d[X # U] := rdist_triangle hX' hX hmeas\n    _ = 0 := by rw [hd, rdist_symm, hdist, zero_add]","declId":"PFR.HundredPercent.159_0.p6jBdbW2tRU6XFf","decl":"/-- If $d[X_1;X_2]=0$, then there exists a subgroup $H \\leq G$ such that\n$d[X_1;U_H] = d[X_2;U_H] = 0$. Follows from the preceding claim by the triangle inequality. -/\ntheorem exists_isUniform_of_rdist_eq_zero\n    {Ω' : Type*} [MeasureSpace Ω'] [IsProbabilityMeasure (ℙ : Measure Ω')] {X' : Ω' → G}\n    (hX : Measurable X) (hX' : Measurable X') (hdist : d[X # X'] = 0) :\n    ∃ H : AddSubgroup G, ∃ U : Ω → G,\n      Measurable U ∧ IsUniform H U ∧ d[X # U] = 0 ∧ d[X' # U] = 0 "}
