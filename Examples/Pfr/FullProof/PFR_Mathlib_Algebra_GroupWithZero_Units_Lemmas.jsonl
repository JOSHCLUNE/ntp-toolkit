{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n","proof":":= by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.5_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b "}
{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b := by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h\n\n","proof":":= by\n  have : b ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_inv_mul_iff_mul_eq₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.10_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `eq_inv_mul_iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_inv_mul_cancel₀'  (ha : a ≠ 0) (h: a = b⁻¹ * c) : b * a = c "}
{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b := by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `eq_inv_mul_iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_inv_mul_cancel₀'  (ha : a ≠ 0) (h: a = b⁻¹ * c) : b * a = c := by\n  have : b ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_inv_mul_iff_mul_eq₀ this] at h; exact h\n\n","proof":":= by\n  have : a ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [inv_mul_eq_iff_eq_mul₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.15_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `inv_mul_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem inv_mul_eq_cancel₀' (hc : c ≠ 0) (h: a⁻¹ * b = c) : b = a * c "}
{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b := by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `eq_inv_mul_iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_inv_mul_cancel₀'  (ha : a ≠ 0) (h: a = b⁻¹ * c) : b * a = c := by\n  have : b ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_inv_mul_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem inv_mul_eq_cancel₀' (hc : c ≠ 0) (h: a⁻¹ * b = c) : b = a * c := by\n  have : a ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [inv_mul_eq_iff_eq_mul₀ this] at h; exact h\n\n","proof":":= by\n  have : b ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [mul_inv_eq_iff_eq_mul₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.20_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `mul_inv_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem mul_inv__eq_cancel₀' (hc : c ≠ 0) (h: a * b⁻¹ = c) : a = c * b "}
{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b := by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `eq_inv_mul_iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_inv_mul_cancel₀'  (ha : a ≠ 0) (h: a = b⁻¹ * c) : b * a = c := by\n  have : b ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_inv_mul_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem inv_mul_eq_cancel₀' (hc : c ≠ 0) (h: a⁻¹ * b = c) : b = a * c := by\n  have : a ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [inv_mul_eq_iff_eq_mul₀ this] at h; exact h\n\n/-- A variant of `mul_inv_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem mul_inv__eq_cancel₀' (hc : c ≠ 0) (h: a * b⁻¹ = c) : a = c * b := by\n  have : b ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [mul_inv_eq_iff_eq_mul₀ this] at h; exact h\n\n","proof":":= by\n  have : a ≠ 0 := by contrapose! h; simp [h]\n  rw [inv_mul_eq_one₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.25_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `inv_mul_eq_one₀` that does not require a nonvanishing hypothesis. --/\nlemma inv_mul_eq_one₀' {G₀ : Type u_3} [GroupWithZero G₀] {a : G₀} {b : G₀}\n(h: a⁻¹ * b = 1) : a = b "}
{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b := by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `eq_inv_mul_iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_inv_mul_cancel₀'  (ha : a ≠ 0) (h: a = b⁻¹ * c) : b * a = c := by\n  have : b ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_inv_mul_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem inv_mul_eq_cancel₀' (hc : c ≠ 0) (h: a⁻¹ * b = c) : b = a * c := by\n  have : a ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [inv_mul_eq_iff_eq_mul₀ this] at h; exact h\n\n/-- A variant of `mul_inv_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem mul_inv__eq_cancel₀' (hc : c ≠ 0) (h: a * b⁻¹ = c) : a = c * b := by\n  have : b ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [mul_inv_eq_iff_eq_mul₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_one₀` that does not require a nonvanishing hypothesis. --/\nlemma inv_mul_eq_one₀' {G₀ : Type u_3} [GroupWithZero G₀] {a : G₀} {b : G₀}\n(h: a⁻¹ * b = 1) : a = b := by\n  have : a ≠ 0 := by contrapose! h; simp [h]\n  rw [inv_mul_eq_one₀ this] at h; exact h\n\n","proof":":= by\n  have : b ≠ 0 := by contrapose! h; simp [h]\n  rw [mul_inv_eq_one₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.31_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `mul_inv_eq_one₀` that does not require a nonvanishing hypothesis. --/\nlemma mul_inv_eq_one₀' {G₀ : Type u_3} [GroupWithZero G₀] {a : G₀} {b : G₀}\n(h: a * b⁻¹ = 1) : a = b "}
{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b := by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `eq_inv_mul_iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_inv_mul_cancel₀'  (ha : a ≠ 0) (h: a = b⁻¹ * c) : b * a = c := by\n  have : b ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_inv_mul_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem inv_mul_eq_cancel₀' (hc : c ≠ 0) (h: a⁻¹ * b = c) : b = a * c := by\n  have : a ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [inv_mul_eq_iff_eq_mul₀ this] at h; exact h\n\n/-- A variant of `mul_inv_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem mul_inv__eq_cancel₀' (hc : c ≠ 0) (h: a * b⁻¹ = c) : a = c * b := by\n  have : b ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [mul_inv_eq_iff_eq_mul₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_one₀` that does not require a nonvanishing hypothesis. --/\nlemma inv_mul_eq_one₀' {G₀ : Type u_3} [GroupWithZero G₀] {a : G₀} {b : G₀}\n(h: a⁻¹ * b = 1) : a = b := by\n  have : a ≠ 0 := by contrapose! h; simp [h]\n  rw [inv_mul_eq_one₀ this] at h; exact h\n\n/-- A variant of `mul_inv_eq_one₀` that does not require a nonvanishing hypothesis. --/\nlemma mul_inv_eq_one₀' {G₀ : Type u_3} [GroupWithZero G₀] {a : G₀} {b : G₀}\n(h: a * b⁻¹ = 1) : a = b := by\n  have : b ≠ 0 := by contrapose! h; simp [h]\n  rw [mul_inv_eq_one₀ this] at h; exact h\n\n","proof":":= by\n  have : b ≠ 0 := by contrapose! h; simp [h]\n  rw [mul_eq_one_iff_eq_inv₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.37_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `mul_eq_one_iff_eq_inv₀` that does not require a nonvanishing hypothesis. -/\nlemma mul_eq_one_cancel_right (h: a * b = 1) : a = b⁻¹ "}
{"srcUpToDecl":"import Mathlib.Algebra.GroupWithZero.Units.Lemmas\n\nvariable {G₀ : Type u_3} [GroupWithZero G₀] {a b c: G₀}\n\n/-- A variant of `eq_mul_inv _iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_mul_inv_cancel₀' (ha : a ≠ 0) (h:a = b * c⁻¹) : a * c = b := by\n  have : c ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_mul_inv_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `eq_inv_mul_iff_mul_eq₀` that moves the nonvanishing hypothesis to another variable. --/\nlemma eq_inv_mul_cancel₀'  (ha : a ≠ 0) (h: a = b⁻¹ * c) : b * a = c := by\n  have : b ≠ 0 := by contrapose! h; simp [h, ha]\n  rw [eq_inv_mul_iff_mul_eq₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem inv_mul_eq_cancel₀' (hc : c ≠ 0) (h: a⁻¹ * b = c) : b = a * c := by\n  have : a ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [inv_mul_eq_iff_eq_mul₀ this] at h; exact h\n\n/-- A variant of `mul_inv_eq_iff_eq_mul₀` that moves the nonvanishing hypothesis to another variable. --/\ntheorem mul_inv__eq_cancel₀' (hc : c ≠ 0) (h: a * b⁻¹ = c) : a = c * b := by\n  have : b ≠ 0 := by contrapose! h; simp [h, hc.symm]\n  rw [mul_inv_eq_iff_eq_mul₀ this] at h; exact h\n\n/-- A variant of `inv_mul_eq_one₀` that does not require a nonvanishing hypothesis. --/\nlemma inv_mul_eq_one₀' {G₀ : Type u_3} [GroupWithZero G₀] {a : G₀} {b : G₀}\n(h: a⁻¹ * b = 1) : a = b := by\n  have : a ≠ 0 := by contrapose! h; simp [h]\n  rw [inv_mul_eq_one₀ this] at h; exact h\n\n/-- A variant of `mul_inv_eq_one₀` that does not require a nonvanishing hypothesis. --/\nlemma mul_inv_eq_one₀' {G₀ : Type u_3} [GroupWithZero G₀] {a : G₀} {b : G₀}\n(h: a * b⁻¹ = 1) : a = b := by\n  have : b ≠ 0 := by contrapose! h; simp [h]\n  rw [mul_inv_eq_one₀ this] at h; exact h\n\n/-- A variant of `mul_eq_one_iff_eq_inv₀` that does not require a nonvanishing hypothesis. -/\nlemma mul_eq_one_cancel_right (h: a * b = 1) : a = b⁻¹ := by\n  have : b ≠ 0 := by contrapose! h; simp [h]\n  rw [mul_eq_one_iff_eq_inv₀ this] at h; exact h\n\n","proof":":= by\n  have : a ≠ 0 := by contrapose! h; simp [h]\n  rw [mul_eq_one_iff_inv_eq₀ this] at h; exact h","declId":"PFR.Mathlib.Algebra.GroupWithZero.Units.Lemmas.42_0.sVtyxMv5yqYhIIe","decl":"/-- A variant of `mul_eq_one_iff_inv_eq₀` that does not require a nonvanishing hypothesis. -/\nlemma mul_eq_one_cancel_left (h: a * b = 1) : a⁻¹ = b "}
