{"srcUpToDecl":"import Mathlib.Data.Set.Card\nimport PFR.ImprovedPFR\nimport PFR.ForMathlib.Graph\nimport PFR.Mathlib.LinearAlgebra.Basis.VectorSpace\nimport PFR.Mathlib.SetTheory.Cardinal.Finite\n\n/-!\n# The homomorphism form of PFR\n\nHere we apply (improved) PFR to show that approximate homomorphisms f from a 2-group to a 2-group\nare close to actual homomorphisms.  Here, approximate is in the sense that f(x+y)-f(x)-f(y) takes\nfew values.\n\n## Main results\n\n* `goursat`: A convenient description of the subspaces of $G \\times G'$ when $G, G'$ are elementary\n  abelian 2-groups.\n* `homomorphism_pfr` : If $f : G → G'$ is a map between finite abelian elementary 2-groups such\n  that $f(x+y)-f(x)-f(y)$ takes at most $K$ values, then there is a homomorphism $\\phi: G \\to G'$\n  such that $f(x)-\\phi(x)$ takes at most $K^{12}$ values.\n-/\n\nopen Pointwise\n\nvariable {G G' : Type*} [AddCommGroup G] [Fintype G] [AddCommGroup G'] [Fintype G']\n  [ElementaryAddCommGroup G 2] [ElementaryAddCommGroup G' 2]\n\n","proof":":= by\n  let H₀ : Submodule (ZMod 2) G := H₀\n  let φ : H₀ →+ G' := φ\n  let φ : H₀ →ₗ[ZMod 2] G' := φ\n  obtain ⟨φ', hφ'⟩ := φ.exists_extend\n  use φ'; intro x; show φ x = φ'.comp H₀.subtype x; rw [hφ']","declId":"PFR.HomPFR.28_0.xgprI4t1fiAW1MZ","decl":"/-- Let $H_0$ be a subgroup of $G$.  Then every homomorphism $\\phi: H_0 \\to G'$ can be extended to a\nhomomorphism $\\tilde \\phi: G \\to G'$. -/\nlemma hahn_banach (H₀ : AddSubgroup G) (φ : H₀ →+ G') : ∃ (φ' : G →+ G'), ∀ x : H₀, φ x = φ' x "}
{"srcUpToDecl":"import Mathlib.Data.Set.Card\nimport PFR.ImprovedPFR\nimport PFR.ForMathlib.Graph\nimport PFR.Mathlib.LinearAlgebra.Basis.VectorSpace\nimport PFR.Mathlib.SetTheory.Cardinal.Finite\n\n/-!\n# The homomorphism form of PFR\n\nHere we apply (improved) PFR to show that approximate homomorphisms f from a 2-group to a 2-group\nare close to actual homomorphisms.  Here, approximate is in the sense that f(x+y)-f(x)-f(y) takes\nfew values.\n\n## Main results\n\n* `goursat`: A convenient description of the subspaces of $G \\times G'$ when $G, G'$ are elementary\n  abelian 2-groups.\n* `homomorphism_pfr` : If $f : G → G'$ is a map between finite abelian elementary 2-groups such\n  that $f(x+y)-f(x)-f(y)$ takes at most $K$ values, then there is a homomorphism $\\phi: G \\to G'$\n  such that $f(x)-\\phi(x)$ takes at most $K^{12}$ values.\n-/\n\nopen Pointwise\n\nvariable {G G' : Type*} [AddCommGroup G] [Fintype G] [AddCommGroup G'] [Fintype G']\n  [ElementaryAddCommGroup G 2] [ElementaryAddCommGroup G' 2]\n\n/-- Let $H_0$ be a subgroup of $G$.  Then every homomorphism $\\phi: H_0 \\to G'$ can be extended to a\nhomomorphism $\\tilde \\phi: G \\to G'$. -/\nlemma hahn_banach (H₀ : AddSubgroup G) (φ : H₀ →+ G') : ∃ (φ' : G →+ G'), ∀ x : H₀, φ x = φ' x := by\n  let H₀ : Submodule (ZMod 2) G := H₀\n  let φ : H₀ →+ G' := φ\n  let φ : H₀ →ₗ[ZMod 2] G' := φ\n  obtain ⟨φ', hφ'⟩ := φ.exists_extend\n  use φ'; intro x; show φ x = φ'.comp H₀.subtype x; rw [hφ']\n\n","proof":":= \\{ (x, \\phi(x) + y): x \\in H_0, y \\in H_1 \\}.$$\nIn particular, $|H| = |H_0| |H_1|$. -/\nlemma goursat (H : AddSubgroup (G × G')): ∃ (H₀ : AddSubgroup G) (H₁ : AddSubgroup G') (φ : G →+ G'),\n    (∀ x : G × G', x ∈ H ↔ (x.1 ∈ H₀ ∧ x.2 - φ x.1 ∈ H₁)) ∧\n    (Nat.card H) = (Nat.card H₀) * (Nat.card H₁) := by\n  obtain ⟨S₁, S₂, f, φ, hf, hf_inv⟩ := (H.toSubmodule (n := 2)).exists_equiv_fst_sndModFst\n  use S₁.toAddSubgroup, S₂.toAddSubgroup, φ\n  constructor ; swap\n  · show Nat.card (H.toSubmodule (n := 2)) = _\n    exact Eq.trans (Nat.card_eq_of_bijective f f.bijective) (Nat.card_prod S₁ S₂)\n  · intro x\n    · constructor\n      · intro hx\n        let x : H := { val := x, property := hx }\n        · constructor\n          · exact Set.mem_of_eq_of_mem (hf x).1.symm (f x).1.property\n          · exact Set.mem_of_eq_of_mem (hf x).2.symm (f x).2.property\n      · intro hx\n        · let x₁ : S₁ := { val := x.1, property := hx.1 }\n          let x₂ : S₂ := { val := x.2 - φ x.1, property := hx.2 }\n          exact Set.mem_of_eq_of_mem (by rw [hf_inv, sub_add_cancel]) (f.symm (x₁, x₂)).property","declId":"PFR.HomPFR.37_0.xgprI4t1fiAW1MZ","decl":"/-- Let $H$ be a subgroup of $G \\times G'$.  Then there exists a subgroup $H_0$ of $G$, a\nsubgroup $H_1$ of $G'$, and a homomorphism $\\phi: G \\to G'$ such that\n$$ H "}
{"srcUpToDecl":"import Mathlib.Data.Set.Card\nimport PFR.ImprovedPFR\nimport PFR.ForMathlib.Graph\nimport PFR.Mathlib.LinearAlgebra.Basis.VectorSpace\nimport PFR.Mathlib.SetTheory.Cardinal.Finite\n\n/-!\n# The homomorphism form of PFR\n\nHere we apply (improved) PFR to show that approximate homomorphisms f from a 2-group to a 2-group\nare close to actual homomorphisms.  Here, approximate is in the sense that f(x+y)-f(x)-f(y) takes\nfew values.\n\n## Main results\n\n* `goursat`: A convenient description of the subspaces of $G \\times G'$ when $G, G'$ are elementary\n  abelian 2-groups.\n* `homomorphism_pfr` : If $f : G → G'$ is a map between finite abelian elementary 2-groups such\n  that $f(x+y)-f(x)-f(y)$ takes at most $K$ values, then there is a homomorphism $\\phi: G \\to G'$\n  such that $f(x)-\\phi(x)$ takes at most $K^{12}$ values.\n-/\n\nopen Pointwise\n\nvariable {G G' : Type*} [AddCommGroup G] [Fintype G] [AddCommGroup G'] [Fintype G']\n  [ElementaryAddCommGroup G 2] [ElementaryAddCommGroup G' 2]\n\n/-- Let $H_0$ be a subgroup of $G$.  Then every homomorphism $\\phi: H_0 \\to G'$ can be extended to a\nhomomorphism $\\tilde \\phi: G \\to G'$. -/\nlemma hahn_banach (H₀ : AddSubgroup G) (φ : H₀ →+ G') : ∃ (φ' : G →+ G'), ∀ x : H₀, φ x = φ' x := by\n  let H₀ : Submodule (ZMod 2) G := H₀\n  let φ : H₀ →+ G' := φ\n  let φ : H₀ →ₗ[ZMod 2] G' := φ\n  obtain ⟨φ', hφ'⟩ := φ.exists_extend\n  use φ'; intro x; show φ x = φ'.comp H₀.subtype x; rw [hφ']\n\n/-- Let $H$ be a subgroup of $G \\times G'$.  Then there exists a subgroup $H_0$ of $G$, a\nsubgroup $H_1$ of $G'$, and a homomorphism $\\phi: G \\to G'$ such that\n$$ H := \\{ (x, \\phi(x) + y): x \\in H_0, y \\in H_1 \\}.$$\nIn particular, $|H| = |H_0| |H_1|$. -/\nlemma goursat (H : AddSubgroup (G × G')): ∃ (H₀ : AddSubgroup G) (H₁ : AddSubgroup G') (φ : G →+ G'),\n    (∀ x : G × G', x ∈ H ↔ (x.1 ∈ H₀ ∧ x.2 - φ x.1 ∈ H₁)) ∧\n    (Nat.card H) = (Nat.card H₀) * (Nat.card H₁) := by\n  obtain ⟨S₁, S₂, f, φ, hf, hf_inv⟩ := (H.toSubmodule (n := 2)).exists_equiv_fst_sndModFst\n  use S₁.toAddSubgroup, S₂.toAddSubgroup, φ\n  constructor ; swap\n  · show Nat.card (H.toSubmodule (n := 2)) = _\n    exact Eq.trans (Nat.card_eq_of_bijective f f.bijective) (Nat.card_prod S₁ S₂)\n  · intro x\n    · constructor\n      · intro hx\n        let x : H := { val := x, property := hx }\n        · constructor\n          · exact Set.mem_of_eq_of_mem (hf x).1.symm (f x).1.property\n          · exact Set.mem_of_eq_of_mem (hf x).2.symm (f x).2.property\n      · intro hx\n        · let x₁ : S₁ := { val := x.1, property := hx.1 }\n          let x₂ : S₂ := { val := x.2 - φ x.1, property := hx.2 }\n          exact Set.mem_of_eq_of_mem (by rw [hf_inv, sub_add_cancel]) (f.symm (x₁, x₂)).property\n\nopen Set Fintype\n\n","proof":":= \\{ f(x+y)-f(x)-f(y): x,y \\in G \\}.$$\nThen there exists a homomorphism $\\phi: G \\to G'$ such that\n$$ |\\{f(x) - \\phi(x)\\}| \\leq |S|^{12}. $$ -/\ntheorem homomorphism_pfr (f : G → G') (S : Set G') (hS: ∀ x y : G, f (x+y) - (f x) - (f y) ∈ S) :\n  ∃ (φ : G →+ G') (T : Set G'), Nat.card T ≤ (Nat.card S) ^ 12 ∧ ∀ x : G, (f x) - (φ x) ∈ T := by\n  classical\n  have : 0 < Nat.card G := Nat.card_pos\n  let A := graph f\n  have hA_le : (Nat.card ↥(A + A) : ℝ) ≤ Nat.card S * Nat.card A := by\n    let B := A - {0}×ˢS\n    have hAB : A + A ⊆ B := by\n      intro x hx\n      obtain ⟨a, ha, a', ha', haa'⟩ := Set.mem_add.mp hx\n      simp at ha ha'\n      rw [Set.mem_sub]\n      refine ⟨(x.1, f x.1), ?_, (0, f (a.1 + a'.1) - f a.1 - f a'.1), ?_⟩\n      · simp\n      · simp only [singleton_prod, mem_image, Prod.mk.injEq, true_and,\n          exists_eq_right, Prod.mk_sub_mk, sub_zero]\n        exact ⟨hS a.1 a'.1,\n          by rw [← Prod.fst_add, ha, ha', sub_sub, ← Prod.snd_add, haa', sub_sub_self]⟩\n    have hB_card : Nat.card B ≤ Nat.card S * Nat.card A :=\n      card_sub_le.trans_eq $ by simp only [mul_comm, Set.card_singleton_prod]\n    norm_cast\n    exact (Nat.card_mono (toFinite B) hAB).trans hB_card\n  have hA_nonempty : A.Nonempty := by use (0, f 0) ; exact ⟨0, rfl⟩\n  obtain ⟨H, c, hcS, -, -, hAcH⟩ := PFR_conjecture_improv_aux hA_nonempty hA_le\n  have : 0 < Nat.card c := by\n    have : c.Nonempty := by\n      by_contra! H\n      simp only [H, empty_add, subset_empty_iff] at hAcH\n      simp [hAcH] at hA_nonempty\n    exact this.card_pos c.toFinite\n  obtain ⟨H₀, H₁, φ, hH₀₁, hH_card⟩ := goursat H\n  have hG_card_le : Nat.card G ≤ Nat.card c * Nat.card H₀ := by\n    let c' := (Prod.fst) '' c\n    have hc'_card : Nat.card c' ≤ Nat.card c := Nat.card_image_le (toFinite c)\n    have h_fstH : Prod.fst '' (H : Set (G × G')) = (H₀ : Set G) := by\n      ext x\n      simp only [mem_image, SetLike.mem_coe, hH₀₁, Prod.exists,\n        exists_and_right, exists_and_left, exists_eq_right, and_iff_left_iff_imp]\n      exact fun _ ↦ ⟨φ x, by simp only [sub_self, AddSubgroup.zero_mem]⟩\n    have hG_cover : (univ : Set G) = c' + (H₀:Set G) := by\n      apply (eq_univ_of_forall (fun g ↦ ?_)).symm\n      have := image_subset Prod.fst hAcH\n      rw [← AddHom.coe_fst, Set.image_add, AddHom.coe_fst, image_fst_graph] at this\n      rw [← h_fstH]\n      exact this (mem_univ g)\n    apply_fun Nat.card at hG_cover\n    rw [Nat.card_coe_set_eq, Set.ncard_univ] at hG_cover\n    rw [hG_cover]\n    calc\n      (Nat.card (c'+ (H₀:Set G))) ≤ Nat.card c' * Nat.card H₀ := card_add_le\n      _ ≤ Nat.card c * Nat.card H₀ := by gcongr\n  have : (Nat.card H₁ : ℝ) ≤ (Nat.card H / Nat.card A) * Nat.card c := by calc\n      (Nat.card H₁ : ℝ) = (Nat.card H : ℝ) / Nat.card H₀ := by field_simp [hH_card, mul_comm]\n      _ ≤ (Nat.card H : ℝ) / (Nat.card G / Nat.card c) := by\n        gcongr\n        rw [div_le_iff' (by positivity)]\n        exact_mod_cast hG_card_le\n      _ = (Nat.card H / Nat.card G : ℝ) * Nat.card c := by field_simp\n      _ = (Nat.card H / Nat.card A) * Nat.card c := by congr; exact (card_graph f).symm\n  let T := (fun p ↦ p.2 - φ p.1) '' (c + {0} ×ˢ (H₁: Set G'))\n  have : A ⊆ ⋃ (c ∈ T), {(x, φ x + c) | x : G} := by\n    have : (H : Set (G × G')) ⊆ ({0} ×ˢ (H₁:Set G')) + {(x, φ x) | x : G} := by\n      rintro ⟨g, g'⟩ hg\n      simp only [SetLike.mem_coe, hH₀₁] at hg\n      refine ⟨(0, g' - φ g), ?_, (g, φ g), ?_⟩\n      · simp only [singleton_prod, mem_image, SetLike.mem_coe,\n          Prod.mk.injEq, true_and, exists_eq_right, hg.2]\n      · simp only [mem_setOf_eq, Prod.mk.injEq, exists_eq_left, Prod.mk_add_mk, zero_add, true_and,\n          sub_add_cancel]\n    have hA_sub : A ⊆ c + (({0} ×ˢ (H₁:Set G')) + {(x, φ x) | x : G})\n    · calc\n        A ⊆ c + (H : Set _) := hAcH\n        _ ⊆ c + (({0} ×ˢ (H₁:Set G')) + {(x, φ x) | x : G}) := add_subset_add_left this\n    rw [← add_assoc] at hA_sub\n    convert hA_sub\n    rw [← Set.iUnion_add_left_image, ← graph_def]\n    simp_rw [graph_add, Set.biUnion_image]\n  refine ⟨φ, T, ?_, ?_⟩\n  · have : (Nat.card T : ℝ) ≤ (Nat.card S : ℝ) ^ (12 : ℝ) := by calc\n      (Nat.card T:ℝ) ≤ Nat.card (c + {(0:G)} ×ˢ (H₁:Set G')) := by\n        norm_cast; apply Nat.card_image_le (toFinite _)\n      _ ≤ Nat.card c * Nat.card H₁ := by\n        norm_cast\n        apply card_add_le.trans\n        rw [Set.card_singleton_prod] ; rfl\n      _ ≤ Nat.card c * ((Nat.card H / Nat.card A) * Nat.card c) := by gcongr\n      _ = (Nat.card c) ^ 2 * (Nat.card H / Nat.card A) := by ring\n      _ ≤ ((Nat.card S) ^ (6 : ℝ) * (Nat.card A) ^ (1 / 2 : ℝ) * (Nat.card H) ^ (-1 / 2 : ℝ)) ^ 2\n          * (Nat.card H / Nat.card A) := by gcongr; exact hcS\n      _ = (Nat.card S : ℝ) ^ (12 : ℝ) := by\n        rw [← Real.rpow_two, div_eq_mul_inv, div_eq_mul_inv, div_eq_mul_inv]\n        have : 0 < Nat.card S := by\n          have : S.Nonempty := ⟨f (0 + 0) - f 0 - f 0, hS 0 0⟩\n          exact this.card_pos S.toFinite\n        have : 0 < Nat.card A := hA_nonempty.card_pos A.toFinite\n        have : 0 < Nat.card H := H.coe_nonempty.card_pos $ toFinite _\n        rpow_ring\n        norm_num\n    exact_mod_cast this\n  · intro g\n    specialize this (⟨g, rfl⟩ : (g, f g) ∈ A)\n    simp only [mem_iUnion, mem_setOf_eq, Prod.mk.injEq, exists_eq_left] at this\n    obtain ⟨t, ⟨ht, h⟩⟩ := this\n    rw [← h]\n    convert ht\n    abel","declId":"PFR.HomPFR.63_0.xgprI4t1fiAW1MZ","decl":"/-- Let $f: G \\to G'$ be a function, and let $S$ denote the set\n$$ S "}
