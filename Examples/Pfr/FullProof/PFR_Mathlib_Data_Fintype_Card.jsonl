{"srcUpToDecl":"import Mathlib.Data.Fintype.Card\n\n/-!\n\nIt has been debated whether to make a positivity extension to show `0 < Fintype.card X` when\ntypeclass inference can find the nonemptiness of the fintype `X`.  For example, see\n\nhttps://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Could.20positivity.20handle.20sums.20of.20squares.3F/near/398074551\n\nThe consensus seems to be in favour, so let's enable it for this project and see what happens.\n\n-/\n\nnamespace Mathlib.Meta.Positivity\n\nopen Lean Meta Qq Function\n\n","proof":":= do\n  let .app (.app _ a) _ ← whnfR e | throwError \"not Fintype.card\"\n  let p ← mkAppOptM ``Fintype.card_pos #[a, none, none]\n  pure (.positive p)","declId":"PFR.Mathlib.Data.Fintype.Card.18_0.Dj6OMlhEBgHP4LS","decl":"/-- Extension for the `positivity` tactic: cardinalities of nonempty fintypes are positive. -/\n@[positivity Fintype.card _]\ndef evalFintypeCard : PositivityExt where eval {_ _} _zα _pα e "}
