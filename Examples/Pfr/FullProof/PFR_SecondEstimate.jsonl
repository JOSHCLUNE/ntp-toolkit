{"srcUpToDecl":"import PFR.FirstEstimate\nimport PFR.Mathlib.Probability.Independence.FourVariables\n\n","proof":":= I_1 [X_1+X_2 : \\tilde X_1 + X_2 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n* $I_2 := I[X_1+X_2 : X_1 + \\tilde X_1 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n\n## Main results\n\n* `second_estimate` : $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$\n-/","declId":"PFR.SecondEstimate.4_0.ihOzV32q8k96pPm","decl":"/-!\n# Second estimate\n\nThe second estimate on tau-minimizers.\n\nAssumptions:\n\n* $X_1, X_2$ are tau-minimizers\n* $X_1, X_2, \\tilde X_1, \\tilde X_2$ be independent random variables, with $X_1,\\tilde X_1$ copies of $X_1$ and $X_2,\\tilde X_2$ copies of $X_2$.\n* $d[X_1;X_2] = k$\n* $I_1 "}
{"srcUpToDecl":"import PFR.FirstEstimate\nimport PFR.Mathlib.Probability.Independence.FourVariables\n\n/-!\n# Second estimate\n\nThe second estimate on tau-minimizers.\n\nAssumptions:\n\n* $X_1, X_2$ are tau-minimizers\n* $X_1, X_2, \\tilde X_1, \\tilde X_2$ be independent random variables, with $X_1,\\tilde X_1$ copies of $X_1$ and $X_2,\\tilde X_2$ copies of $X_2$.\n* $d[X_1;X_2] = k$\n* $I_1 := I_1 [X_1+X_2 : \\tilde X_1 + X_2 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n* $I_2 := I[X_1+X_2 : X_1 + \\tilde X_1 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n\n## Main results\n\n* `second_estimate` : $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$\n-/\n\nopen MeasureTheory ProbabilityTheory ElementaryAddCommGroup\n\nvariable {G : Type*} [addgroup: AddCommGroup G] [Fintype G] [hG : MeasurableSpace G]\n  [MeasurableSingletonClass G] [elem: ElementaryAddCommGroup G 2] [MeasurableAdd₂ G]\n\nvariable {Ω₀₁ Ω₀₂ : Type*} [MeasureSpace Ω₀₁] [MeasureSpace Ω₀₂]\n  [IsProbabilityMeasure (ℙ : Measure Ω₀₁)] [IsProbabilityMeasure (ℙ : Measure Ω₀₂)]\n\nvariable (p : refPackage Ω₀₁ Ω₀₂ G)\n\nvariable {Ω : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n\nvariable (X₁ X₂ X₁' X₂' : Ω → G)\n  (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₁' : Measurable X₁') (hX₂' : Measurable X₂')\n\nvariable (h₁ : IdentDistrib X₁ X₁') (h₂ : IdentDistrib X₂ X₂')\n\nvariable (h_indep : iIndepFun (fun _i => hG) ![X₁, X₂, X₁', X₂'])\n\nvariable (h_min: tau_minimizes p X₁ X₂)\n\n","proof":":= d[X₁ # X₂]`, the Ruzsa distance `rdist` between X₁ and X₂. -/\nlocal notation3 \"k\" => d[X₁ # X₂]","declId":"PFR.SecondEstimate.43_0.ihOzV32q8k96pPm","decl":"/-- `k "}
{"srcUpToDecl":"import PFR.FirstEstimate\nimport PFR.Mathlib.Probability.Independence.FourVariables\n\n/-!\n# Second estimate\n\nThe second estimate on tau-minimizers.\n\nAssumptions:\n\n* $X_1, X_2$ are tau-minimizers\n* $X_1, X_2, \\tilde X_1, \\tilde X_2$ be independent random variables, with $X_1,\\tilde X_1$ copies of $X_1$ and $X_2,\\tilde X_2$ copies of $X_2$.\n* $d[X_1;X_2] = k$\n* $I_1 := I_1 [X_1+X_2 : \\tilde X_1 + X_2 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n* $I_2 := I[X_1+X_2 : X_1 + \\tilde X_1 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n\n## Main results\n\n* `second_estimate` : $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$\n-/\n\nopen MeasureTheory ProbabilityTheory ElementaryAddCommGroup\n\nvariable {G : Type*} [addgroup: AddCommGroup G] [Fintype G] [hG : MeasurableSpace G]\n  [MeasurableSingletonClass G] [elem: ElementaryAddCommGroup G 2] [MeasurableAdd₂ G]\n\nvariable {Ω₀₁ Ω₀₂ : Type*} [MeasureSpace Ω₀₁] [MeasureSpace Ω₀₂]\n  [IsProbabilityMeasure (ℙ : Measure Ω₀₁)] [IsProbabilityMeasure (ℙ : Measure Ω₀₂)]\n\nvariable (p : refPackage Ω₀₁ Ω₀₂ G)\n\nvariable {Ω : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n\nvariable (X₁ X₂ X₁' X₂' : Ω → G)\n  (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₁' : Measurable X₁') (hX₂' : Measurable X₂')\n\nvariable (h₁ : IdentDistrib X₁ X₁') (h₂ : IdentDistrib X₂ X₂')\n\nvariable (h_indep : iIndepFun (fun _i => hG) ![X₁, X₂, X₁', X₂'])\n\nvariable (h_min: tau_minimizes p X₁ X₂)\n\n/-- `k := d[X₁ # X₂]`, the Ruzsa distance `rdist` between X₁ and X₂. -/\nlocal notation3 \"k\" => d[X₁ # X₂]\n\n","proof":":= I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₂` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₁\" => I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']","declId":"PFR.SecondEstimate.46_0.ihOzV32q8k96pPm","decl":"/-- `I₁ "}
{"srcUpToDecl":"import PFR.FirstEstimate\nimport PFR.Mathlib.Probability.Independence.FourVariables\n\n/-!\n# Second estimate\n\nThe second estimate on tau-minimizers.\n\nAssumptions:\n\n* $X_1, X_2$ are tau-minimizers\n* $X_1, X_2, \\tilde X_1, \\tilde X_2$ be independent random variables, with $X_1,\\tilde X_1$ copies of $X_1$ and $X_2,\\tilde X_2$ copies of $X_2$.\n* $d[X_1;X_2] = k$\n* $I_1 := I_1 [X_1+X_2 : \\tilde X_1 + X_2 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n* $I_2 := I[X_1+X_2 : X_1 + \\tilde X_1 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n\n## Main results\n\n* `second_estimate` : $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$\n-/\n\nopen MeasureTheory ProbabilityTheory ElementaryAddCommGroup\n\nvariable {G : Type*} [addgroup: AddCommGroup G] [Fintype G] [hG : MeasurableSpace G]\n  [MeasurableSingletonClass G] [elem: ElementaryAddCommGroup G 2] [MeasurableAdd₂ G]\n\nvariable {Ω₀₁ Ω₀₂ : Type*} [MeasureSpace Ω₀₁] [MeasureSpace Ω₀₂]\n  [IsProbabilityMeasure (ℙ : Measure Ω₀₁)] [IsProbabilityMeasure (ℙ : Measure Ω₀₂)]\n\nvariable (p : refPackage Ω₀₁ Ω₀₂ G)\n\nvariable {Ω : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n\nvariable (X₁ X₂ X₁' X₂' : Ω → G)\n  (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₁' : Measurable X₁') (hX₂' : Measurable X₂')\n\nvariable (h₁ : IdentDistrib X₁ X₁') (h₂ : IdentDistrib X₂ X₂')\n\nvariable (h_indep : iIndepFun (fun _i => hG) ![X₁, X₂, X₁', X₂'])\n\nvariable (h_min: tau_minimizes p X₁ X₂)\n\n/-- `k := d[X₁ # X₂]`, the Ruzsa distance `rdist` between X₁ and X₂. -/\nlocal notation3 \"k\" => d[X₁ # X₂]\n\n/-- `I₁ := I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₂` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₁\" => I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']\n\n","proof":":= I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₁` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₂\" => I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']","declId":"PFR.SecondEstimate.50_0.ihOzV32q8k96pPm","decl":"/-- `I₂ "}
{"srcUpToDecl":"import PFR.FirstEstimate\nimport PFR.Mathlib.Probability.Independence.FourVariables\n\n/-!\n# Second estimate\n\nThe second estimate on tau-minimizers.\n\nAssumptions:\n\n* $X_1, X_2$ are tau-minimizers\n* $X_1, X_2, \\tilde X_1, \\tilde X_2$ be independent random variables, with $X_1,\\tilde X_1$ copies of $X_1$ and $X_2,\\tilde X_2$ copies of $X_2$.\n* $d[X_1;X_2] = k$\n* $I_1 := I_1 [X_1+X_2 : \\tilde X_1 + X_2 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n* $I_2 := I[X_1+X_2 : X_1 + \\tilde X_1 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n\n## Main results\n\n* `second_estimate` : $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$\n-/\n\nopen MeasureTheory ProbabilityTheory ElementaryAddCommGroup\n\nvariable {G : Type*} [addgroup: AddCommGroup G] [Fintype G] [hG : MeasurableSpace G]\n  [MeasurableSingletonClass G] [elem: ElementaryAddCommGroup G 2] [MeasurableAdd₂ G]\n\nvariable {Ω₀₁ Ω₀₂ : Type*} [MeasureSpace Ω₀₁] [MeasureSpace Ω₀₂]\n  [IsProbabilityMeasure (ℙ : Measure Ω₀₁)] [IsProbabilityMeasure (ℙ : Measure Ω₀₂)]\n\nvariable (p : refPackage Ω₀₁ Ω₀₂ G)\n\nvariable {Ω : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n\nvariable (X₁ X₂ X₁' X₂' : Ω → G)\n  (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₁' : Measurable X₁') (hX₂' : Measurable X₂')\n\nvariable (h₁ : IdentDistrib X₁ X₁') (h₂ : IdentDistrib X₂ X₂')\n\nvariable (h_indep : iIndepFun (fun _i => hG) ![X₁, X₂, X₁', X₂'])\n\nvariable (h_min: tau_minimizes p X₁ X₂)\n\n/-- `k := d[X₁ # X₂]`, the Ruzsa distance `rdist` between X₁ and X₂. -/\nlocal notation3 \"k\" => d[X₁ # X₂]\n\n/-- `I₁ := I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₂` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₁\" => I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']\n\n/-- `I₂ := I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₁` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₂\" => I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']\n\n","proof":":= by\n  refine' LE.le.ge (LE.le.trans _ (distance_ge_of_min p h_min (hX₁.add hX₁') (hX₂.add hX₂')))\n  rw [sub_sub, sub_le_sub_iff_left k, ← mul_add,mul_div_assoc]\n  refine' mul_le_mul_of_nonneg_left _ (by linarith [p.hη])\n  have h₁' := condRuzsaDist_diff_le' ℙ p.hmeas1 hX₁ hX₁' (h_indep.indepFun (show 0 ≠ 2 by decide))\n  have h₂' := condRuzsaDist_diff_le' ℙ p.hmeas2 hX₂ hX₂' (h_indep.indepFun (show 1 ≠ 3 by decide))\n  rw [h₁.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₁.aemeasurable).rdist_eq h₁] at h₁'\n  rw [h₂.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₂.aemeasurable).rdist_eq h₂] at h₂'\n  linarith","declId":"PFR.SecondEstimate.54_0.ihOzV32q8k96pPm","decl":"/-- $$ d[X_1+\\tilde X_1; X_2+\\tilde X_2] \\geq k - \\frac{\\eta}{2} ( d[X_1; X_1] + d[X_2;X_2] ).$$\n-/\nlemma rdist_of_sums_ge' : d[X₁ + X₁' # X₂ + X₂'] ≥ k - p.η * (d[X₁ # X₁] + d[X₂ # X₂]) / 2 "}
{"srcUpToDecl":"import PFR.FirstEstimate\nimport PFR.Mathlib.Probability.Independence.FourVariables\n\n/-!\n# Second estimate\n\nThe second estimate on tau-minimizers.\n\nAssumptions:\n\n* $X_1, X_2$ are tau-minimizers\n* $X_1, X_2, \\tilde X_1, \\tilde X_2$ be independent random variables, with $X_1,\\tilde X_1$ copies of $X_1$ and $X_2,\\tilde X_2$ copies of $X_2$.\n* $d[X_1;X_2] = k$\n* $I_1 := I_1 [X_1+X_2 : \\tilde X_1 + X_2 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n* $I_2 := I[X_1+X_2 : X_1 + \\tilde X_1 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n\n## Main results\n\n* `second_estimate` : $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$\n-/\n\nopen MeasureTheory ProbabilityTheory ElementaryAddCommGroup\n\nvariable {G : Type*} [addgroup: AddCommGroup G] [Fintype G] [hG : MeasurableSpace G]\n  [MeasurableSingletonClass G] [elem: ElementaryAddCommGroup G 2] [MeasurableAdd₂ G]\n\nvariable {Ω₀₁ Ω₀₂ : Type*} [MeasureSpace Ω₀₁] [MeasureSpace Ω₀₂]\n  [IsProbabilityMeasure (ℙ : Measure Ω₀₁)] [IsProbabilityMeasure (ℙ : Measure Ω₀₂)]\n\nvariable (p : refPackage Ω₀₁ Ω₀₂ G)\n\nvariable {Ω : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n\nvariable (X₁ X₂ X₁' X₂' : Ω → G)\n  (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₁' : Measurable X₁') (hX₂' : Measurable X₂')\n\nvariable (h₁ : IdentDistrib X₁ X₁') (h₂ : IdentDistrib X₂ X₂')\n\nvariable (h_indep : iIndepFun (fun _i => hG) ![X₁, X₂, X₁', X₂'])\n\nvariable (h_min: tau_minimizes p X₁ X₂)\n\n/-- `k := d[X₁ # X₂]`, the Ruzsa distance `rdist` between X₁ and X₂. -/\nlocal notation3 \"k\" => d[X₁ # X₂]\n\n/-- `I₁ := I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₂` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₁\" => I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']\n\n/-- `I₂ := I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₁` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₂\" => I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']\n\n/-- $$ d[X_1+\\tilde X_1; X_2+\\tilde X_2] \\geq k - \\frac{\\eta}{2} ( d[X_1; X_1] + d[X_2;X_2] ).$$\n-/\nlemma rdist_of_sums_ge' : d[X₁ + X₁' # X₂ + X₂'] ≥ k - p.η * (d[X₁ # X₁] + d[X₂ # X₂]) / 2 := by\n  refine' LE.le.ge (LE.le.trans _ (distance_ge_of_min p h_min (hX₁.add hX₁') (hX₂.add hX₂')))\n  rw [sub_sub, sub_le_sub_iff_left k, ← mul_add,mul_div_assoc]\n  refine' mul_le_mul_of_nonneg_left _ (by linarith [p.hη])\n  have h₁' := condRuzsaDist_diff_le' ℙ p.hmeas1 hX₁ hX₁' (h_indep.indepFun (show 0 ≠ 2 by decide))\n  have h₂' := condRuzsaDist_diff_le' ℙ p.hmeas2 hX₂ hX₂' (h_indep.indepFun (show 1 ≠ 3 by decide))\n  rw [h₁.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₁.aemeasurable).rdist_eq h₁] at h₁'\n  rw [h₂.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₂.aemeasurable).rdist_eq h₂] at h₂'\n  linarith\n\n","proof":":= by\n  have hX₁_indep : IndepFun X₁ X₁' (μ := ℙ) := h_indep.indepFun (show 0 ≠ 2 by decide)\n  have hX₂_indep : IndepFun X₂ X₂' (μ := ℙ) := h_indep.indepFun (show 1 ≠ 3 by decide)\n  have hX_indep : IndepFun (X₁ + X₁') (X₂ + X₂') := by\n    exact h_indep.indepFun_add_add (ι := Fin 4) (by intro i; fin_cases i <;> assumption) 0 2 1 3\n      (by decide) (by decide) (by decide) (by decide)\n  have h : d[X₁ + X₁' # X₂+ X₂'] ≤ (2 + p.η) * k - (d[X₁# X₁] + d[X₂ # X₂]) / 2 - I₁ := by\n    have h := hX_indep.rdist_eq (hX₁.add hX₁') (hX₂.add hX₂')\n    rw [sub_eq_add (X₁ + X₁') (X₂ + X₂'), ← sub_eq_add X₁ X₁', ← sub_eq_add X₂ X₂',\n      sub_eq_iff_eq_add.mp (sub_eq_iff_eq_add.mp (hX₁_indep.rdist_eq hX₁ hX₁').symm),\n      sub_eq_iff_eq_add.mp (sub_eq_iff_eq_add.mp (hX₂_indep.rdist_eq hX₂ hX₂').symm),\n      ← h₁.entropy_eq, ← h₂.entropy_eq, add_assoc, add_assoc, add_halves', add_halves',\n      ← (IdentDistrib.refl hX₁.aemeasurable).rdist_eq h₁,\n      ← (IdentDistrib.refl hX₂.aemeasurable).rdist_eq h₂,\n      sub_eq_add X₁ X₁', sub_eq_add X₂ X₂', ← add_assoc, add_right_comm _ X₁'] at h\n    have h_indep' : iIndepFun (fun _i => hG) ![X₁, X₂, X₂', X₁'] :=\n      by exact h_indep.reindex_four_abdc\n    have h' := ent_ofsum_le p X₁ X₂ X₁' X₂' hX₁ hX₂ hX₁' hX₂' h₁ h₂ h_indep' h_min\n    convert (h.symm ▸ (sub_le_sub_right (sub_le_sub_right h' _) _)) using 1; ring\n  have h' := (rdist_of_sums_ge' p X₁ X₂ X₁' X₂' hX₁ hX₂ hX₁' hX₂' h₁ h₂ h_indep h_min).le.trans h\n  rw [← div_le_iff' two_pos, ← sub_le_iff_le_add', le_div_iff (by linarith [p.hη'])]\n  linarith","declId":"PFR.SecondEstimate.66_0.ihOzV32q8k96pPm","decl":"lemma second_estimate_aux :\n    d[X₁ # X₁] + d[X₂ # X₂] ≤ 2 * (k + (2 * p.η * k - I₁) / (1 - p.η)) "}
{"srcUpToDecl":"import PFR.FirstEstimate\nimport PFR.Mathlib.Probability.Independence.FourVariables\n\n/-!\n# Second estimate\n\nThe second estimate on tau-minimizers.\n\nAssumptions:\n\n* $X_1, X_2$ are tau-minimizers\n* $X_1, X_2, \\tilde X_1, \\tilde X_2$ be independent random variables, with $X_1,\\tilde X_1$ copies of $X_1$ and $X_2,\\tilde X_2$ copies of $X_2$.\n* $d[X_1;X_2] = k$\n* $I_1 := I_1 [X_1+X_2 : \\tilde X_1 + X_2 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n* $I_2 := I[X_1+X_2 : X_1 + \\tilde X_1 | X_1+X_2+\\tilde X_1+\\tilde X_2]$\n\n## Main results\n\n* `second_estimate` : $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$\n-/\n\nopen MeasureTheory ProbabilityTheory ElementaryAddCommGroup\n\nvariable {G : Type*} [addgroup: AddCommGroup G] [Fintype G] [hG : MeasurableSpace G]\n  [MeasurableSingletonClass G] [elem: ElementaryAddCommGroup G 2] [MeasurableAdd₂ G]\n\nvariable {Ω₀₁ Ω₀₂ : Type*} [MeasureSpace Ω₀₁] [MeasureSpace Ω₀₂]\n  [IsProbabilityMeasure (ℙ : Measure Ω₀₁)] [IsProbabilityMeasure (ℙ : Measure Ω₀₂)]\n\nvariable (p : refPackage Ω₀₁ Ω₀₂ G)\n\nvariable {Ω : Type*} [MeasureSpace Ω] [IsProbabilityMeasure (ℙ : Measure Ω)]\n\nvariable (X₁ X₂ X₁' X₂' : Ω → G)\n  (hX₁ : Measurable X₁) (hX₂ : Measurable X₂) (hX₁' : Measurable X₁') (hX₂' : Measurable X₂')\n\nvariable (h₁ : IdentDistrib X₁ X₁') (h₂ : IdentDistrib X₂ X₂')\n\nvariable (h_indep : iIndepFun (fun _i => hG) ![X₁, X₂, X₁', X₂'])\n\nvariable (h_min: tau_minimizes p X₁ X₂)\n\n/-- `k := d[X₁ # X₂]`, the Ruzsa distance `rdist` between X₁ and X₂. -/\nlocal notation3 \"k\" => d[X₁ # X₂]\n\n/-- `I₁ := I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₂` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₁\" => I[X₁ + X₂ : X₁' + X₂ | X₁ + X₂ + X₁' + X₂']\n\n/-- `I₂ := I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']`, the conditional mutual information\nof `X₁ + X₂` and `X₁' + X₁` given the quadruple sum `X₁ + X₂ + X₁' + X₂'`. -/\nlocal notation3 \"I₂\" => I[X₁ + X₂ : X₁' + X₁ | X₁ + X₂ + X₁' + X₂']\n\n/-- $$ d[X_1+\\tilde X_1; X_2+\\tilde X_2] \\geq k - \\frac{\\eta}{2} ( d[X_1; X_1] + d[X_2;X_2] ).$$\n-/\nlemma rdist_of_sums_ge' : d[X₁ + X₁' # X₂ + X₂'] ≥ k - p.η * (d[X₁ # X₁] + d[X₂ # X₂]) / 2 := by\n  refine' LE.le.ge (LE.le.trans _ (distance_ge_of_min p h_min (hX₁.add hX₁') (hX₂.add hX₂')))\n  rw [sub_sub, sub_le_sub_iff_left k, ← mul_add,mul_div_assoc]\n  refine' mul_le_mul_of_nonneg_left _ (by linarith [p.hη])\n  have h₁' := condRuzsaDist_diff_le' ℙ p.hmeas1 hX₁ hX₁' (h_indep.indepFun (show 0 ≠ 2 by decide))\n  have h₂' := condRuzsaDist_diff_le' ℙ p.hmeas2 hX₂ hX₂' (h_indep.indepFun (show 1 ≠ 3 by decide))\n  rw [h₁.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₁.aemeasurable).rdist_eq h₁] at h₁'\n  rw [h₂.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₂.aemeasurable).rdist_eq h₂] at h₂'\n  linarith\n\nlemma second_estimate_aux :\n    d[X₁ # X₁] + d[X₂ # X₂] ≤ 2 * (k + (2 * p.η * k - I₁) / (1 - p.η)) := by\n  have hX₁_indep : IndepFun X₁ X₁' (μ := ℙ) := h_indep.indepFun (show 0 ≠ 2 by decide)\n  have hX₂_indep : IndepFun X₂ X₂' (μ := ℙ) := h_indep.indepFun (show 1 ≠ 3 by decide)\n  have hX_indep : IndepFun (X₁ + X₁') (X₂ + X₂') := by\n    exact h_indep.indepFun_add_add (ι := Fin 4) (by intro i; fin_cases i <;> assumption) 0 2 1 3\n      (by decide) (by decide) (by decide) (by decide)\n  have h : d[X₁ + X₁' # X₂+ X₂'] ≤ (2 + p.η) * k - (d[X₁# X₁] + d[X₂ # X₂]) / 2 - I₁ := by\n    have h := hX_indep.rdist_eq (hX₁.add hX₁') (hX₂.add hX₂')\n    rw [sub_eq_add (X₁ + X₁') (X₂ + X₂'), ← sub_eq_add X₁ X₁', ← sub_eq_add X₂ X₂',\n      sub_eq_iff_eq_add.mp (sub_eq_iff_eq_add.mp (hX₁_indep.rdist_eq hX₁ hX₁').symm),\n      sub_eq_iff_eq_add.mp (sub_eq_iff_eq_add.mp (hX₂_indep.rdist_eq hX₂ hX₂').symm),\n      ← h₁.entropy_eq, ← h₂.entropy_eq, add_assoc, add_assoc, add_halves', add_halves',\n      ← (IdentDistrib.refl hX₁.aemeasurable).rdist_eq h₁,\n      ← (IdentDistrib.refl hX₂.aemeasurable).rdist_eq h₂,\n      sub_eq_add X₁ X₁', sub_eq_add X₂ X₂', ← add_assoc, add_right_comm _ X₁'] at h\n    have h_indep' : iIndepFun (fun _i => hG) ![X₁, X₂, X₂', X₁'] :=\n      by exact h_indep.reindex_four_abdc\n    have h' := ent_ofsum_le p X₁ X₂ X₁' X₂' hX₁ hX₂ hX₁' hX₂' h₁ h₂ h_indep' h_min\n    convert (h.symm ▸ (sub_le_sub_right (sub_le_sub_right h' _) _)) using 1; ring\n  have h' := (rdist_of_sums_ge' p X₁ X₂ X₁' X₂' hX₁ hX₂ hX₁' hX₂' h₁ h₂ h_indep h_min).le.trans h\n  rw [← div_le_iff' two_pos, ← sub_le_iff_le_add', le_div_iff (by linarith [p.hη'])]\n  linarith\n\n","proof":":= by\n  have hX₁_indep : IndepFun X₁ X₁' (μ := ℙ) := h_indep.indepFun (show 0 ≠ 2 by decide)\n  have hX₂_indep : IndepFun X₂ X₂' (μ := ℙ) := h_indep.indepFun (show 1 ≠ 3 by decide)\n  let Y : Fin 4 → Ω → G := ![X₂, X₁, X₂', X₁']\n  have hY : ∀ i, Measurable (Y i) := fun i => by fin_cases i <;> assumption\n  have hY_indep : iIndepFun (fun _ => hG) Y := by exact h_indep.reindex_four_badc\n  have h := sum_of_rdist_eq_char_2 Y hY_indep hY\n  rw [show Y 0 = X₂ by rfl, show Y 1 = X₁ by rfl, show Y 2 = X₂' by rfl, show Y 3 = X₁' by rfl] at h\n  rw [← h₂.rdist_eq h₁, rdist_symm, rdist_symm (X := X₂ + X₂'),\n    condRuzsaDist_symm (Z := X₂ + X₂') (W := X₁ + X₁') (hX₂.add hX₂') (hX₁.add hX₁'),\n    ← two_mul] at h\n  replace h : 2 * k = d[X₁ + X₁' # X₂ + X₂'] + d[X₁ | X₁ + X₁' # X₂ | X₂ + X₂'] + I[X₁ + X₂ : X₁ + X₁'|X₁ + X₂ + X₁' + X₂'] := by\n    convert h using 3 <;> abel\n  have h' := condRuzsaDistance_ge_of_min p h_min hX₁ hX₂ (X₁ + X₁') (X₂ + X₂') (hX₁.add hX₁') (hX₂.add hX₂')\n  have h₁' := condRuzsaDist_diff_le''' ℙ p.hmeas1 hX₁ hX₁' hX₁_indep\n  have h₂' := condRuzsaDist_diff_le''' ℙ p.hmeas2 hX₂ hX₂' hX₂_indep\n  rw [h₁.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₁.aemeasurable).rdist_eq h₁] at h₁'\n  rw [h₂.entropy_eq, add_sub_cancel, ← (IdentDistrib.refl hX₂.aemeasurable).rdist_eq h₂] at h₂'\n  have h'' : I₂ ≤ p.η * (d[X₁ # X₁] + d[X₂ # X₂]) := by\n    simp_rw [← add_comm X₁ X₁']\n    have h₁'' := mul_le_mul_of_nonneg_left h₁' (show 0 ≤ p.η by linarith [p.hη])\n    have h₂'' := mul_le_mul_of_nonneg_left h₂' (show 0 ≤ p.η by linarith [p.hη])\n    have := rdist_of_sums_ge' p _ _ _ _ hX₁ hX₂ hX₁' hX₂' h₁ h₂ h_indep h_min\n    linarith\n  nth_rewrite 1 [mul_div_assoc, ← mul_add, mul_assoc, mul_left_comm]\n  refine' h''.trans (mul_le_mul_of_nonneg_left _ (show 0 ≤ p.η by linarith [p.hη]))\n  exact second_estimate_aux p X₁ X₂ X₁' X₂' hX₁ hX₂ hX₁' hX₂' h₁ h₂ h_indep h_min","declId":"PFR.SecondEstimate.90_0.ihOzV32q8k96pPm","decl":"/-- $$ I_2 \\leq 2 \\eta k + \\frac{2 \\eta (2 \\eta k - I_1)}{1 - \\eta}.$$ -/\nlemma second_estimate : I₂ ≤ 2 * p.η * k + (2 * p.η * (2 * p.η * k - I₁)) / (1 - p.η) "}
